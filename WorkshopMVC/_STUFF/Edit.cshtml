

  @model Mha.Ids.Data.Model.MarketShareDto
   @using System.Web.Script.Serialization

   @{
       Layout = "../../Views/Shared/NoSideLayoutSignalr.cshtml";
       ViewBag.Title = @ViewBag.Title;
 }  

  <script src="../../Scripts/TableSorter.js" type="text/javascript"></script>
 
  
  
  <script type="text/javascript">
    
      $(document).ready(function () {     
          $(function () {

          //"Set default values for future Ajax requests. Its use is not recommended"
          //http://api.jquery.com/jquery.ajaxsetup/
          //cache: false will force requested pages not to be cached by the browser

              $.ajaxSetup({ cache: false });
          })
      })
  </script>

  


@*<div id="bodyalignleft">*@
 
 <div id="centercontent">
 @*data-bind="visible: (PickerVisible() == false)"*@
     <div id="reports" >
    
      
       
         <h2> @ViewBag.Title</h2>     
     <div class = "buttons" >
        
        <button type="button" style="width:100px" class="positive" onclick="WizardPrevious()" data-bind="enable: WizardTab()>0">
                         <img src="../../Content/images/removeFilteringBtn.png"  alt=""/> 
                        Previous
                        </button>  
                        <button type="button" style="width:100px" class="positive" onclick="WizardNext()" data-bind="enable: WizardTab()<5">Next
                         <img src="../../Content/images/addFilteringBtn.png"  alt=""/> 
                        
                        </button>  
    </div>
     
    
      
         <br />  
   
    @{Html.BeginForm("Edit", "ReportMarketShare", FormMethod.Post, new { id = "TheForm" }); }

         <div id = "ViewHIPAADialog" > 
                    <p id="contentholder2">Nothing</p>
             </div>
@{ Html.Telerik().TabStrip()
       .Name("TabStrip")
       .Items(tabstrip =>
       {
           tabstrip.Add()
               .Text("1. Report Type or Unit")
               //.ImageUrl("../../Content/images/ajax.png") 
               .HtmlAttributes(new {onclick = "onTabClick()"})
               .Content(@<text>                    
               <fieldset>
           
    <legend style="text-align:left">Report Type or Unit</legend>
    <div>Report Name:&nbsp<span><input data-bind="style: { width: '500px'},value: Description" /></span></div>
    <br />
    <div >Entity:&nbsp<span>@Html.DropDownListFor(model => model.UnitId, (IEnumerable<SelectListItem>)ViewBag.UnitList, new { @data_bind = "enable:false, value: UnitId" })</span></div>
    <br />
    <div >Report Type:&nbsp<span>@Html.DropDownListFor(model => model.ReportTypesId, (IEnumerable<SelectListItem>)ViewBag.TypeList, new { @data_bind = "enable:false,value: ReportTypesId ,click: function() { SetReportTypeDefaults();SetTrendingValue(); }" })</span></div>
    <br />
    <div>Patient Type:&nbsp<select data-bind="enable:false,style: { width: '200px'},options: PatientTypeList, optionsText: 'Name',optionsValue: 'Value', value: DataType1"></select></div>
    
     
          
         @*data-bind="visible: !IsTemplateReport()"*@
     </fieldset>             
               </text>);
               
           tabstrip.Add()
               .Text("2. Select Date Range and Trend Type")
               .HtmlAttributes(new {onclick = "onTabClick()"})
               //.ImageUrl("../../Content/images/ajax.png")
               .Content(@<text>                    
        <fieldset>
    <legend style="text-align:left">Select Date Range</legend>
        
            <div>Data Range:&nbsp<select data-bind="style: { width: '200px'},options: DateTypeList, optionsText: 'Name',optionsValue: 'Value', value: DateCalculationType"></select>&nbsp<span>Start Date:&nbsp</span><select data-bind="style: { width: '150px'},enable: DateCalculationType() == 'E', options: DateList,optionsText: 'Description',optionsValue:'YearMonth', value: StartYearMonth"></select>&nbsp<span>End Date:&nbsp</span><select data-bind="style: { width: '150px'},enable: DateCalculationType() == 'E', options: DateList,optionsText: 'Description',optionsValue:'YearMonth', value: EndYearMonth"></select>&nbsp<span data-bind="style: { color: 'red'}, text: InvalidDate()"></span></div>
            <div data-bind="visible:DateCalculationType() != 'E'">Period Type:&nbsp<select data-bind="style: { width: '200px'},visible:DateCalculationType() != 'E',options: PeriodTypeList, optionsText: 'Name',optionsValue: 'Value', value: DatePeriodType"></select></div>
           <div data-bind="visible:DateCalculationType() != 'E'">Time Periods:&nbsp<input id="DatePeriods"   onchange="DirtyDate = false" data-bind="style: { width: '80px'},visible:DateCalculationType() != 'E',value: DatePeriods" /><span data-bind="style: { color: 'red'}, text: DateErrorMessage()">
           </span> Please enter whole number only.</div>
             </fieldset>
             <div  data-bind="visible:TrendOn() == 'On'">
         <fieldset>
             <legend style="text-align:left">Trend Type</legend>
             
             <div data-bind="text: TrendDescription(),visible:Trending() != '0'"></div>
             
             <div>Trend Period:&nbsp<select data-bind="style: { width: '180px'},options: TrendPeriod, optionsText: 'Name',optionsValue: 'Value', value: TrendOnPeriod,click: function() { SetTrendingValue() }"></select></div>
             
             <div>Trend Sort:&nbsp<select data-bind="style: { width: '300px'},options: TrendSort, optionsText: 'Name',optionsValue: 'Value', value: TrendOnSort,click: function() { SetTrendingValue() }"></select>
              
              <span data-bind="visible:false"><input type="radio" value="C" data-bind="checked: YearType" />Calendar Year</span>             
            <span data-bind="visible:false"><input type="radio" value="F" data-bind="checked: YearType" />Fiscal Year</span>
                 </div>
            
             
            
             
           </fieldset>
           </div>
        </text>);
           tabstrip.Add()
               .Text("3. Define Target Market")
               .HtmlAttributes(new {onclick = "onTabClick()"})
               //.ImageUrl("../../Content/images/ajax.png")
               .Content(@<text>
        <fieldset>
    <legend style="text-align:left">Define Target Market</legend>
    
             
   
           @*<div><button data-bind="click: function() { reportViewModel.GetField1Sorts() }">Get field 1 sorts</button><button data-bind="click: function() { reportViewModel.GetField2Sorts() }">Get field 2 sorts</button><button data-bind="click: function() { reportViewModel.GetField3Sorts() }">Get field 3 sorts</button></div>*@
            
            
            @*<hr /><h2>Debug</h2><div data-bind="text: ko.toJSON(reportViewModel)">*@
            @* <Start of geographic filter stuff> *@
            <div>
            
            <span>Advanced Filter Mode (use OR statements) &nbsp<input type="checkbox" data-bind="checked: ShowAdvancedFilter" />
            </span>
            </div>
            <div><h3 id="filterheader">Geographic Filter</h3>
            
            </div>
            <div>
            <span>Apply Default Service Area Filter when this report is run or scheduled: &nbsp<input type="checkbox" data-bind="checked: IsTemplateReport" /></span>
            <span data-bind="visible: IsHost() == true && IsTemplateReport">&nbsp &nbsp Define this report as a global share: &nbsp<input type="checkbox" data-bind="checked: IsGlobalShare" /></span>
            
           
            </div>
            <div data-bind="visible: IsTemplateReport()"><span data-bind="style: { color: 'red'}">The default geographic filter will be applied when this report is run.</span></div>
            <div data-bind="visible: !IsTemplateReport()">
     
                 
           <div data-bind="visible: !IsTemplateReport()">Saved Geographic Filters: &nbsp
           <select data-bind="style: { width: '400px'},options: GeographicFilterList, optionsText: 'Description',optionsValue: 'Id', value: FilterIdGeographic, optionsCaption: 'Do not apply a saved filter'"></select>
           <span data-bind="visible: FilterIdGeographic"><button class="t-button t-state-default" type="submit" value ="ApplyGeographicFilter" name = "submitButton" data-bind="click:function(){reportViewModel.ActionMethod('ApplyGeographicFilter'); return true;}">Apply Filter</button></span>
 </div>
   
    
    
          <div>
            <span class="buttons" style="float:none">
            <button data-bind="click: function() { reportViewModel.addLineGeographic() }">
            <img src="../../Content/images/addBtn.png"  alt=""/>
            Add Filter Detail
            </button>
                  
            </span>
            
           <span data-bind="style: { color: 'red'}, text: ParenthesisMessageGeographic()">
           </span>
           </div>
     
    <br />
    <table class="tableb">
    <thead>
        <tr>
    <th width="30px"data-bind="visible: reportViewModel.ShowAdvancedFilter">Move</th>
    <th width="30px"></th>
    <th width="85px" data-bind="visible: reportViewModel.ShowAdvancedFilter">And/Or</th>
    <th width="35px" data-bind="visible: reportViewModel.ShowAdvancedFilter">(</th>
    <th width="205px">Field</th>
    <th width="162px" >Operator</th>
    <th width="300px">Value</th>
    <th width="30px" data-bind="visible: reportViewModel.ShowAdvancedFilter">)</th>
    </tr>
    </thead>
    <tbody data-bind='template: {name: "filterRowTemplateGeographic", foreach: MarketShareLiveFilterGeographicDetailsList}'></tbody>
    </table>
     
                <br />  @*no effect*@
     <div data-bind="visible: reportViewModel.MarketShareLiveFilterGeographicDetailsList().length > 0, style: {textAlign:'center', marginBottom:'5px'}">
                @*no effect*@
<span class="buttons">
     <button  data-bind="click:function(){reportViewModel.ActionMethod('ValidateGeographicFilter'); return true;}, style: {marginBottom:'5px'}">  <img src="../../Content/images/validateBtn.png"  alt=""/>Validate Filters</button><br />
    
    &nbsp Save Geographic Filter as: <input data-bind="style: { width: '400px'},value: NewGeographicFilterName, valueUpdate: 'afterkeydown'" /> 
     </span>
     <span class="buttons">
     
     <button class="positive" type="submit"  value ="SaveFilter" name = "submitButton" data-bind="enable:NewGeographicFilterName(), click:function(){reportViewModel.ActionMethod('SaveGeographicFilter'); return true;} " >  <img src="../../Content/images/saveBtn.png"  alt=""/> Save Filter</button>
        </span>
        
         <div>
         <span data-bind="style: { color: 'red'}, text: GeographicFilterMessage()"></span></div>
        </div>
     </div>
       @* <Start of case filter stuff> *@
   
            <div>
     
            <h3 id="filterheader">Case Filter</h3>     
           
           
            <div>Saved Case Filters: &nbsp<select data-bind="style: { width: '400px'},options: CaseFilterList, optionsText: 'Description',optionsValue: 'Id', value: FilterIdCase, optionsCaption: 'Do not apply a saved filter'"></select>&nbsp 
    <span data-bind="visible: FilterIdCase"><button class="t-button t-state-default" type="submit" value ="ApplyCaseFilter" name = "submitButton" data-bind="click:function(){reportViewModel.ActionMethod('ApplyCaseFilter'); return true;}">Apply Filter</button></span>
  
    </div>
    <div>
            <span class="buttons" style="float:none">
            <button data-bind="click: function() { reportViewModel.addLine() }">
            <img src="../../Content/images/addBtn.png"  alt=""/>
            Add Filter Detail
            </button>
                 
            </span>
       
           <span data-bind="style: { color: 'red'}, text: ParenthesisMessage()">
           </span>
           </div>
         
     <br />       
    <table class="tableb">
    <thead>
        <tr>
    <th width="30px"data-bind="visible: reportViewModel.ShowAdvancedFilter">Move</th>
    <th width="30px"></th>
    <th width="85px" data-bind="visible: reportViewModel.ShowAdvancedFilter">And/Or</th>
    <th width="35px" data-bind="visible: reportViewModel.ShowAdvancedFilter">(</th>
    <th width="205px">Field</th>
    <th width="167px" >Operator</th>
    <th width="300px">Value</th>
    <th width="30px" data-bind="visible: reportViewModel.ShowAdvancedFilter">)</th>
    </tr>
    </thead>
    <tbody data-bind='template: {name: "filterRowTemplate", foreach: MarketShareLiveFilterDetailsList}'></tbody>
    </table>
     <br />  
     <div data-bind="visible: reportViewModel.MarketShareLiveFilterDetailsList().length > 0, style: {textAlign: 'center'}">
         <span class="buttons">
     <button data-bind="click:function(){reportViewModel.ActionMethod('ValidateCaseFilter'); return true;}, style:{marginBottom:'5px'}">  <img src="../../Content/images/validateBtn.png"  alt=""/>Validate Filters</button><br />
             
             &nbsp Save Case Filter as: <input data-bind="style: { width: '400px'},value: NewFilterName, valueUpdate: 'afterkeydown'" /> 
     </span>
     <span class="buttons">
     <button class="positive" type="submit"  value ="SaveFilter" name = "submitButton" data-bind="enable:NewFilterName(), click:function(){reportViewModel.ActionMethod('SaveFilter'); return true;} " >  <img src="../../Content/images/saveBtn.png"  alt=""/> Save Filter</button>
     
     @* <button class="t-button t-state-default" type="submit" value ="SaveGeographicFilter" name = "submitButton" data-bind="click:function(){reportViewModel.ActionMethod('SaveGeographicFilter'); return true;}">Save Geographic Filter</button>*@
     
        </span>
         <div>
         <span data-bind="style: { color: 'red'}, text: CaseFilterMessage()"></span></div>
     @*<span data-bind="visible: NewFilterName ">
    
     
     
        </span>*@
     </div>
     
       </div>
    
    
 </fieldset>
        </text>);
           tabstrip.Add()
               .Text("4. Report Designer")
               .HtmlAttributes(new {onclick = "onTabClick()"})
               //.ImageUrl("../../Content/images/ajax.png")
               .Content(@<text>                    
        <fieldset>
    <legend style="text-align:left">Report Designer</legend>

 <div id="divSelectColumns" data-bind="visible: SelectColumnsVisible">        
 <table class="tableb" id="ShowSection">
    <thead>
        <tr>
    <th data-bind="style: { width: '100px'}"></th>
        <th data-bind="visible:reportViewModel.MarketLevel() > 0,style: { width: '80px'}"><span >Field Value (Level 1)</span></th>
    <th data-bind="visible:reportViewModel.MarketLevel() > 0,style: { width: '80px'}"><span >Field Description (Level 1)</span></th>
        <th data-bind="visible:reportViewModel.MarketLevel() > 1,style: { width: '80px'}"><span >Field Value (Level 2)</span></th>
        <th data-bind="visible:reportViewModel.MarketLevel() > 1,style: { width: '80px'}"><span >Field Description (Level 2)</span></th>
        <th data-bind="visible:reportViewModel.MarketLevel() > 2,style: { width: '80px'}"><span >Field Value (Level 3)</span></th>
        <th data-bind="visible:reportViewModel.MarketLevel() > 2,style: { width: '80px'}"><span >Field Description (Level 3)</span></th>
        
    <th data-bind="style: { width: '80px'}"><span data-bind="text: Column1Text"></span></th>
    <th data-bind="visible:!(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND'),style: { width: '80px'}"><span data-bind="text: Column2Text"></span></th>
    <th data-bind="visible:!(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND'),style: { width: '80px'}"><span data-bind="text: Column3Text"></span></th>
    <th data-bind="visible:reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND' ,style: { width: '80px'}"><span data-bind="text: Column4Text"></span></th>
    <th data-bind="visible:!(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND'),style: { width: '80px'}"><span data-bind="text: Column5Text"></span></th>
    <th data-bind="visible:!(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND'),style: { width: '80px'}"><span data-bind="text: Column6Text"></span></th>
    <th data-bind="style: { width: '80px'}"><span data-bind="text: Column7Text"></span></th>
        <th data-bind="visible:reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND',style: { width: '80px'}"><span data-bind="text: Column8Text"></span></th>
    </tr>
    
    </thead>
    <tr>
    <td data-bind="style: { width: '100px'}">Show Data ...</td>
        <td data-bind="visible:reportViewModel.MarketLevel() > 0,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowField1" /></td>
    <td data-bind="visible:reportViewModel.MarketLevel() > 0,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowField1Description" /></td>
    <td data-bind="visible:reportViewModel.MarketLevel() > 1,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowField2" /></td>
        <td data-bind="visible:reportViewModel.MarketLevel() > 1,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowField2Description" /></td>
    <td data-bind="visible:reportViewModel.MarketLevel() > 2,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowField3" /></td>
           <td data-bind="visible:reportViewModel.MarketLevel() > 2,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowField3Description" /></td>
    
    <td data-bind="style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowDischargesHospital" /></td>
    <td data-bind="visible:!(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND'),style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowDischargesState" /></td>
    <td data-bind="visible:!(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND'),style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowDischargesPercent" /></td>
    <td data-bind="visible:reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND' ,style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowHospitalPercent" /></td>
    <td data-bind="visible:!(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND'),style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowLOSHospital" /></td>
    <td data-bind="visible:!(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND'),style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowLOSState" /></td>
    <td data-bind="style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowLOSPercent" /></td>
        <td data-bind="visible:reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND',style: { width: '80px'}"><input type="checkbox" data-bind="checked: ShowLOSHospitalPercent" /></td>
    
    </tr>
    </table>
    </div> 
        <table id="Trending">
      <thead>
    <tr>
    <th class="td" data-bind="style: { width: '280px'}"><span data-bind="style: { color: 'red'}, text: ValidateReportMessage()"></span></th>
     
     <th class="td" data-bind="visible:Trending() != '0',style: { width: '650px'}"><span data-bind="text: TrendDescription()"></span></th>
    </tr>
    </thead>
    </table>
    @*<table class="tableb">
    <tr>
    <td>  *@
    <table >
    <thead>
        <tr>
    <th class="rbw" data-bind="style: { width: '280px'}">Levels:&nbsp<select data-bind="style: { width: '200px'},options: LevelList, optionsText: 'Name',optionsValue: 'Value', value: MarketLevel"></select></th>
    <th class="td" data-bind="style: { width: '60px'}">&nbsp</th>
        <th class="td" data-bind="style: { width: '130px'}"><a href="#" data-bind="click: function(){reportViewModel.SelectColumns()}">Select Visible columns</a></th>
    
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesHospital">&nbsp</th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')">&nbsp</th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesPercent() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')">&nbsp</th>
        <th class="td" data-bind="style: { width: '65px'},visible:ShowHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')">&nbsp</th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSHospital() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')">&nbsp</th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')">&nbsp</th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSPercent">&nbsp</th>
        <th class="td" data-bind="style: { width: '65px'},visible:ShowLOSHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')">&nbsp</th>
    <th class="lbw" data-bind="style: { width: '100px'}">&nbsp</th>
    </tr>
    </thead>
    </table>    
               <table >
    <thead>
        <tr>
    <th class="rb" data-bind="style: { width: '280px'}">Field</th>
         <th data-bind="style: { width: '60px'}"><span >Field Value</span></th>
    <th data-bind="style: { width: '130px'}"><span >Field Description</span></th>
   
    <th data-bind="style: { width: '60px'},visible:ShowDischargesHospital"><span data-bind="text: Column1Text"></span></th>
    <th data-bind="style: { width: '60px'},visible:ShowDischargesState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span data-bind="text: Column2Text"></span></th>
    <th data-bind="style: { width: '60px'},visible:ShowDischargesPercent() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span data-bind="text: Column3Text"></span></th>
        <th data-bind="style: { width: '65px'},visible:ShowHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span data-bind="text: Column4Text"></span></th>
    <th data-bind="style: { width: '60px'},visible:ShowLOSHospital() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span data-bind="text: Column5Text"></span></th>
    <th data-bind="style: { width: '60px'},visible:ShowLOSState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span data-bind="text: Column6Text"></span></th>
    <th data-bind="style: { width: '60px'},visible:ShowLOSPercent"><span data-bind="text: Column7Text"></span></th>
        <th data-bind="style: { width: '65px'},visible:ShowLOSHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span data-bind="text: Column8Text"></span></th>
    <th class="lb" data-bind="style: { width: '100px'}">Records</th>
    </tr>
    </thead>
    </table>
    
   
     <table id="Field1" class="sortable" data-bind="visible: (MarketLevel())">
      <thead>
    <tr>
    <th class="rbw sorttable_nosort" data-bind="style: { width: '280px'}"><select data-bind="style: { width: '240px'}, options: DictionaryList,optionsText: 'FieldLabel',optionsValue:'Id', optionsCaption: 'Choose ...',value: Field1"></select></th>
    <th class="td" data-bind="style: { width: '60px'}"><span class=uline data-bind="visible:ShowField1">XX</span></th>
          <th class="td" data-bind="style: { width: '130px'}"><span class=uline data-bind="visible:ShowField1Description()">Description</span></th>
    
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesHospital"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesPercent() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span class=uline>9%</span></th>
          <th class="td" data-bind="style: { width: '65px'},visible:ShowHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>9%</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSHospital() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSPercent"><span class=uline>9%</span></th>
          <th class="td" data-bind="style: { width: '65px'},visible:ShowLOSHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>9%</span></th>
    <th class="lbw sorttable_nosort" data-bind="style: { width: '100px'}"><select data-bind="style: { width: '90px'},options: RecordsList, optionsText: 'Name',optionsValue: 'Value', value: Field1Records"></select></th>
    </tr>
    </thead>
    </table>
    
     <table id="Field2" class="sortable" data-bind="visible: (MarketLevel() > 1)">
      <thead>
    <tr>
    <th class="rbw sorttable_nosort" data-bind="style: { width: '280px'}">&nbsp &nbsp<select data-bind="style: { width: '240px'}, options: DictionaryList,optionsText: 'FieldLabel',optionsValue:'Id', optionsCaption: 'Choose ...',value: Field2"></select></th>
    <th class="td" data-bind="style: { width: '60px'}"><span class=uline data-bind="visible:ShowField2">XX</span></th>
          <th class="td" data-bind="style: { width: '130px'}">&nbsp &nbsp<span class=uline data-bind="visible:ShowField2Description">Description</span></th>
    
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesHospital"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesPercent() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span class=uline>9%</span></th>
          <th class="td" data-bind="style: { width: '65px'},visible:ShowHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>9%</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSHospital() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSPercent"><span class=uline>9%</span></th>
          <th class="td" data-bind="style: { width: '65px'},visible:ShowLOSHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>9%</span></th>
    <th class="lbw sorttable_nosort" data-bind="style: { width: '100px'}"><select data-bind="style: { width: '90px'},options: RecordsList, optionsText: 'Name',optionsValue: 'Value', value: Field2Records"></select></th>
    </tr>
    </thead>
    </table>

   
    <table id="Field3" class="sortable" data-bind="visible: (MarketLevel() > 2)">
      <thead>
    <tr>
    <th class="rbw sorttable_nosort" data-bind="style: { width: '280px'}">&nbsp &nbsp &nbsp &nbsp<select data-bind="style: { width: '240px'}, options: DictionaryList,optionsText: 'FieldLabel',optionsValue:'Id', optionsCaption: 'Choose ...',value: Field3"></select></th>
    <th class="td" data-bind="style: { width: '60px'}"><span class=uline data-bind="visible:ShowField3">XX</span></th>
          <th class="td" data-bind="style: { width: '130px'}">&nbsp &nbsp &nbsp &nbsp<span class=uline data-bind="visible:ShowField3Description">Description</span></th>
    
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesHospital"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesState() &&!(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowDischargesPercent() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span class=uline>9%</span></th>
          <th class="td" data-bind="style: { width: '65px'},visible:ShowHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>9%</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSHospital() && !(reportViewModel.ReportDriver() == 'MKTREPLICATION') && !(reportViewModel.ReportDriver() == 'MKTREPLICATIONTREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSState() && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARE') && !(reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>99</span></th>
    <th class="td" data-bind="style: { width: '60px'},visible:ShowLOSPercent"><span class=uline>9%</span></th>
          <th class="td" data-bind="style: { width: '65px'},visible:ShowLOSHospitalPercent() && (reportViewModel.ReportDriver() == 'HOSPMKTSHARE' || reportViewModel.ReportDriver() == 'HOSPMKTSHARETREND')"><span class=uline>9%</span></th>
    <th class="lbw sorttable_nosort" data-bind="style: { width: '100px'}"><select data-bind="style: { width: '90px'},options: RecordsList, optionsText: 'Name',optionsValue: 'Value', value: Field3Records"></select></th>
    </tr>
    </thead>
    </table>
   @*</td>
    </tr>
   

    
   </table>*@
             
</fieldset>   
        </text>);
           tabstrip.Add()
                      .Text("5. Select Output and Run Report")
                      .HtmlAttributes(new {onclick = "onTabClick()"})

                      .Content(@<text>                    
       
 <fieldset>
  
    <legend style="text-align:left">Select Output</legend>
         <br />
              <div>Report Name: &nbsp <span><input onchange="onTabClick()" data-bind="style: { width: '500px'},value: Description" /> </span></div>
           <br />
   
       
 <div >
 
           <div> Output Type:&nbsp<select onchange="onTabClick()" data-bind="style: { width: '200px'},options: OutputTypeList, optionsText: 'Name',optionsValue: 'Value', value: OutputType "></select></div>
           <br />
           <div><span data-bind="style: { color: 'red'}, text: ValidateReportMessage()"></span></div>
           <div><span class = "buttons" ><button class="positive" type="submit" value ="Validate" name = "submitButton" data-bind="enable: !QueryMessage() || InvalidReport(), click:function(){reportViewModel.ActionMethod('Run'); return true;}"><img src="../../Content/images/Validate.png"  alt=""/>Validate Report</button></span>
               &nbsp &nbsp<span class = "buttons" ><button class="positive" type="submit"  value ="RunButton" name = "runButton" id="runButton" data-bind="enable: QueryMessage() && IsConnected() && !InvalidReport(), click:function(){reportViewModel.QueryMessage('');setmessage('');InvalidReport('');}"><img src="../../Content/images/runningMan.png"  alt=""/>Run Validated Report</button>
                   </span></div>
     </div>
     <div data-bind="visible: QueryMessage()">@Html.Raw(ViewBag.QueryMessage)</div>
           
     </fieldset>
            
               </text>);
           tabstrip.Add()
                      .Text("6. Save Report")
                      .HtmlAttributes(new {onclick = "onTabClick()"})
                      .Content(@<text>                    
              
 <fieldset>
  
    <legend style="text-align:left">Save Report</legend>
    <br />
     
   
     @*
          <div><button type="submit" value ="Save" name = "submitButton" >Save Report</button>&nbsp Save as: <span><input data-bind="style: { width: '350px'},value: Description" /> </span></div>
           <div><button type="submit" value ="Run" name = "submitButton" >Run Report</button>&nbsp Output Type:&nbsp<select data-bind="style: { width: '200px'},options: OutputTypeList, optionsText: 'Name',optionsValue: 'Value', value: OutputType"></select></div>
            <div><button type="submit" value ="Schedule" name = "submitButton" >Schedule Report</button></div>
 *@    
 <div class = "buttons" >
           
           <div> Save as: <span><input data-bind="style: { width: '500px'},value: Description" /> </span></div>
           <br />
           <div><button class="positive" type="submit"  value ="Save" name = "submitButton" data-bind="click:function(){reportViewModel.ActionMethod('Save'); return true;} " >  <img src="../../Content/images/saveBtn.png"  alt=""/> Save Report</button>
           <button class="positive" type="submit" value ="SaveNew" name = "submitButton" data-bind="click:function(){reportViewModel.ActionMethod('SaveNew'); return true;} " >  <img src="../../Content/images/saveBtn.png"  alt=""/> Save as New Report</button></div>
           @* <div><button class="positive" type="submit" value ="Schedule" name = "submitButton" data-bind="click:function(){reportViewModel.ActionMethod('Schedule'); return true;}" > <img src="../../Content/images/clock.png"  alt=""/> Schedule Report</button></div>*@
    </div>
      <div class="error" ><span>@ViewBag.SaveMessage</span></div>
     <div data-bind="visible: QueryMessage()">@Html.Raw(ViewBag.QueryMessage)</div> 
     </fieldset>
            
               </text>);
       }).SelectedIndex(0)
       .ClientEvents(events =>
       events.OnSelect("WizardSelect"))


       .HtmlAttributes(new { style = "width:1160px; " })
       .Render();} 


 @*<div id="divSaveReport" data-bind="visible: SaveReportVisible">
  <div> Save as: <span><input data-bind="style: { width: '350px'},value: Description" /> </span></div>
  <div class = "buttons" >  
                         
                         <div><button class="positive" type="submit" value ="Save" name = "submitButton" data-bind="click: function(){document.TheForm.submit();  }" >  <img src="../../Content/images/saveBtn.png"  alt=""/> Save Report</button>
           
                        <button class="positive" style="width:200px;" data-bind="click: function(){reportViewModel.CloseSaveReport()}" > 
                            <img src="../../Content/images/deleteBtn.png"  alt=""/> Cancel
                        </button>
                    
                   </div>
             </div>*@
 
    @{Html.EndForm();}

   @* <div>
    @Html.ActionLink("Back to List", "Index")
    </div>*@
    <div > 
        <fieldset>
            <legend style="text-align:left">Reports Submitted Today</legend>
            @* Report Requests Submitted Today for <span>@ViewBag.UnitName</span>&nbsp&nbsp *@

            <div class="message-box clean" data-bind="visible: RequestMessage()">
                <span class="error" data-bind="text: RequestMessage()"></span>
            </div>
            <div class="error">Incomplete Reports:<span data-bind="text:IncompleteReportCount()"></span></div>


            @(Html.Telerik().Grid<Mha.Ids.Data.ReportsSubmittedTodayList_Result>()
.Name("GridViewResults")
    .DataKeys(keys => keys.Add(o => o.ReportRunId))
    .DataKeys(keys => keys.Add(o => o.ReportRunId))
    .EnableCustomBinding(true)
.Columns(columns =>
{

    columns.Bound(o => o.TimeStarted).Title("Date").Width(100).Format("{0:T}").Title("Submit Time");
    columns.Bound(o => o.TimeEnded).Title("Date").Width(100).Format("{0:T}").Title("Finish Time");
    columns.Bound(o => o.UnitName).Width(170).Title("Entity Name");
    // columns.Bound(o => o.ModuleDescription).Width(100).Title("Module");

    columns.Bound(o => o.ReportDescription).Width(280).Title("Report Name");
    // columns.Bound(o => o.EstimatedTime).Width(80).Title("Estimated");
    columns.Bound(o => o.executiontime).Width(120).Title("Time (seconds)");

    columns.Bound(o => o.ReportStatus).Width(80).Title("Status");

    // columns.Template(o => @Html.ActionLink("View Report", "View", new { reportRunId = o.ReportRunId })).Width(50);


    // columns.Bound(c => c.ReportRunId).ClientTemplate("<# if (ReportStatus == 'Completed') {#>" + "<a href='" + Url.Action("View", "ReportViewer", new { reportRunId = "<#=ReportRunId#>" }) + " '>Open Report</a>  " + " <#}#>").Title("");
    //  columns.Bound(c => c.ReportRunId).Filterable(false).ClientTemplate("<# if (ReportStatus == 'Completed' && OutputType == 'XLTemplate' && ReportDriverId.indexOf('2LEVEL') != -1 && '" + @ViewBag.BrowserType + "' == 'IE8' ) {#>" + "<a href='" + Url.Action("View", "ReportViewer", new { reportRunId = "<#=ReportRunId#>" }) + " '>Choose Save on the Prompt that Appears</a>  " + " <#} else if (ReportStatus == 'Completed'   ) {#>" + "<a href='" + Url.Action("View", "ReportViewer", new { reportRunId = "<#=ReportRunId#>" }) + " '> Open Report </a>  " + " <#} #>").Title("");
    columns.Bound(c => c.ReportRunId)
        .Filterable(false)
        .ClientTemplate(
            "<# if (isHipaaMining == true) {#>" +
            "<a href='javascript:' onclick=\"viewHipaa()\">HIPAA</a>" +

            " <#} else if (ReportStatus == 'Completed' && " +
            "OutputType == 'XLTemplate' && ReportDriverId.indexOf('2LEVEL') != -1 && '" +
            @ViewBag.BrowserType + "' == 'IE8' ) {#>" +
            "<a href='" +
            Url.Action("View", "ReportViewer", new { reportRunId = "<#=ReportRunId#>" }) +
            " '>Choose Save on the Prompt that Appears</a>  " +

            " <#} else if (ReportStatus == 'Completed'   ) {#>" +
            "<a href='" +
            Url.Action("View", "ReportViewer", new { reportRunId = "<#=ReportRunId#>" }) +
            " '> Open Report </a>  " + " <#} #>")
        .Title("");
})

 .DataBinding(dataBinding => dataBinding.Ajax().Select("GetTodayReports", "ReportViewer"))

                        .ClientEvents(e =>

                            e.OnDataBinding("onDataBindingReports")

                        )
                            .ClientEvents(e =>


                            e.OnRowDataBound("onRowDataBoundReports")
                        )
                            .ClientEvents(e =>


                            e.OnDataBound("onDataBoundReports")
                            .OnLoad("OnLoad")
                        )
.Scrollable((scroll) =>
{
    scroll.Enabled(true).Height(120);
})
.Sortable()
.Selectable()
.Pageable(pagerAction => pagerAction.PageSize(200))
         .Filterable()
 .HtmlAttributes(new { style = "width:1000px;" })

            )




        </fieldset>











    </div>
     <br /> 
     <div class="buttons" >
     <a href="@Url.Action("CancelEdit", "ReportMarketShare")">  
        <img src="../../Content/images/backBtn.png"  alt=""/>  
        Back  
    </a>
     </div>
   
    <div id="divSinglePicker" data-bind="visible: PickerSingleVisible">
    <div><h3><span data-bind="text: FieldLabel()"></span></h3></div>
    <table width="100%">
            <tr>
                <th width="100%"  align="center">  Single Value Picker</th>
               
            </tr>
            <tr>
                <td width="100%" valign="top" align="center">
                 @(Html.Telerik().Grid<Mha.Ids.Data.DataDictionaryPicker_Result>()
        .Name("SinglePickerGrid")
        .TableHtmlAttributes(new { id = "SinglePickerTable" })
        .DataKeys(dataKeys => dataKeys.Add(c => c.FieldValue))
                .Columns(columns =>
                {
                   // columns.Bound(o => o.FieldValue).ClientTemplate("<input type='checkbox' name='availableChecked' class='availableCheck' value='<#= FieldValue #>' />").Title("<input id='masterAvailablecheckbox' type='checkbox' />").Width(36).Filterable(false).HtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(o => o.FieldValue).Width(80).Title("Value").HtmlAttributes(new { style = "text-align:left" });
                    columns.Bound(o => o.FieldName).Title("Description").HtmlAttributes(new { style = "text-align:left" });
                })
                         //, onclick = "availableClicked()" 
        .DataBinding(dataBinding => dataBinding.Ajax().Select("GetLookupValues", "Filter"))
                         //.ClientEvents(events => events.OnDataBinding("onDataBindingLeft"))
                        .ClientEvents(e =>

                            e.OnDataBinding("onDataBindingSingle")
                            //.OnLoad("onLoadSingle")
                            //.OnRowDataBound("onRowDataBoundSingle")
                            .OnRowSelected("onRowSelectedSingle")
                        )
                       // .RowAction(row => row.Selected = row.DataItem.FieldValue.Equals(reportViewModel.SelectedSingleValue()))
                       .Selectable()
        .Filterable()
                .Pageable(settings => settings.PageSize(500))
                .Scrollable(scrolling => scrolling.Height(300))
        .HtmlAttributes(new { style = "width:400px;" })
                         // .Selectable()
        )
                </td>
                
                
            </tr>
            <tr>
                
                <td width="40%" valign="top" align="center">
                    
                  @*  <div><button style="width:200px;" data-bind="click: function(){reportViewModel.SavePicker()}">Apply Selections</button></div>
                    <div><button style="width:200px;" data-bind="click: function(){reportViewModel.ClosePicker()}">Cancel Selections</button></div>
    *@
                     <div class = "buttons" >  
                        

                        <button class="positive" style="width:200px;border-collapse:separate" data-bind="click: function(){reportViewModel.CloseSinglePicker()}" > 
                            <img src="../../Content/images/deleteBtn.png"  alt=""/> Cancel
                        </button>
                    
                   </div>
                </td>
                
            </tr>
            
        </table>
        
       
    </div> 
    
   

   
    <div id="divPicker" data-bind="visible: PickerVisible">
    <div><h3><span data-bind="text: FieldLabel()"></span></h3></div>
    <table width="100%">
            <tr>
                <th width="40%"  align="center">  Available</th>
                <th width="20%"  align="center">&nbsp;</th>
                <th width="40%"  align="center">  Requested</th>
            </tr>
            <tr>
                <td width="40%" valign="top" align="center">
                 @(Html.Telerik().Grid<Mha.Ids.Data.DataDictionaryPicker_Result>()
        .Name("AvailableGrid")
        .TableHtmlAttributes(new { id = "AvailableTable" })
        .DataKeys(dataKeys => dataKeys.Add(c => c.FieldValue))
                .Columns(columns =>
                {
                    columns.Bound(o => o.FieldValue).ClientTemplate("<input type='checkbox' name='availableChecked' class='availableCheck' value='<#= FieldValue #>' />").Title("<input id='masterAvailablecheckbox' type='checkbox' />").Width(36).Filterable(false).HtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(o => o.FieldValue).Width(80).Title("Value").HtmlAttributes(new { style = "text-align:left" });
                    columns.Bound(o => o.FieldName).Title("Description").HtmlAttributes(new { style = "text-align:left" });
                })
                         //, onclick = "availableClicked()" 
        .DataBinding(dataBinding => dataBinding.Ajax().Select("GetLookupValues", "Filter"))
                         //.ClientEvents(events => events.OnDataBinding("onDataBindingLeft"))
                        .ClientEvents(e =>

                            e.OnDataBinding("onDataBindingLeft")
                            .OnLoad("onLoadLeft")
                            .OnRowDataBound("onRowDataBoundLeft")

                        )
        .Filterable()
                .Pageable(settings => settings.PageSize(500))
                .Scrollable(scrolling => scrolling.Height(300))
        .HtmlAttributes(new { style = "width:400px;" })
                         // .Selectable()
        )
                </td>
                <td width="20%" valign="top" align="center">
                    @*<div><input type="submit" name="add" style="width:200px;" value=">>" data-bind="click: reportViewModel.addRequested, enable:reportViewModel.SelectedLeftValues().length > 0" /></div>
                    <div><input type="submit" name="remove" style="width:200px;" value="<<" data-bind="click: reportViewModel.removeRequested, enable:reportViewModel.SelectedRightValues().length > 0" /></div>
                    *@
                     <div class = "buttons" >
                     <button class= "positive" type="submit" name="add"  style="width:200px; border-collapse:separate"   data-bind="click: reportViewModel.addRequested, enable:reportViewModel.SelectedLeftValues().length > 0" >
                      Add <img src="../../Content/images/addFilteringBtn.png"  alt=""/> 
                     </button>  
 
                     <br />
                     <button class= "positive" type="submit" name="remove" style="width:200px;border-collapse:separate" data-bind="click: reportViewModel.removeRequested, enable:reportViewModel.SelectedRightValues().length > 0"  >
                            <img src="../../Content/images/removeFilteringBtn.png"  alt=""/> Remove
                     </button> 
                    </div>
    
                </td>
                <td width="40%" valign="top" align="center">
                @(Html.Telerik().Grid<Mha.Ids.Data.DataDictionaryPicker_Result>()
        .Name("SelectedGrid")
        .TableHtmlAttributes(new { id = "SelectedTable" })
        .DataKeys(dataKeys => dataKeys.Add(c => c.FieldValue))
        .Columns(columns =>
        {
            columns.Bound(o => o.FieldValue).ClientTemplate("<input type='checkbox' name='selectedChecked' class='selectedCheck'  value='<#= FieldValue #>' />").Title("<input id='masterSelectedcheckbox' type='checkbox' />").Width(36).Filterable(false).HtmlAttributes(new { style = "text-align:center" });
            columns.Bound(o => o.FieldValue).Width(80).Title("Value").HtmlAttributes(new { style = "text-align:left" });
            columns.Bound(o => o.FieldName).Title("Description").HtmlAttributes(new { style = "text-align:left" });
        })
        .DataBinding(dataBinding => dataBinding.Ajax().Select("GetLookupValues", "Filter"))
                .ClientEvents(e =>

                                    e.OnDataBinding("onDataBindingRight")
                                    .OnLoad("onLoadRight")
                                    .OnRowDataBound("onRowDataBoundRight")

                                )
                        //.Filterable()
                        .Pageable(settings => settings.PageSize(500))
                .Scrollable(scrolling => scrolling.Height(300))
                        .HtmlAttributes(new { style = "width:400px;" })
                        // .Selectable()
        )
                    
                </td>
            </tr>
            <tr>
                <td width="40%" valign="top" align="center">
               
                </td>
                <td width="20%" valign="top" align="center">
                    
                  @*  <div><button style="width:200px;" data-bind="click: function(){reportViewModel.SavePicker()}">Apply Selections</button></div>
                    <div><button style="width:200px;" data-bind="click: function(){reportViewModel.ClosePicker()}">Cancel Selections</button></div>
    *@
                     <div class = "buttons" >  
                        <button class="positive" style="width:200px; border-collapse:separate" data-bind="click: function(){reportViewModel.SavePicker()}" > 
                            <img src="../../Content/images/saveBtn.png"  alt=""/> Save
                        </button> 

                        <button class="positive" style="width:200px;border-collapse:separate" data-bind="click: function(){reportViewModel.ClosePicker()}" > 
                            <img src="../../Content/images/deleteBtn.png"  alt=""/> Cancel
                        </button>
                    
                   </div>
                </td>
                <td width="40%" valign="top" align="center">
               
                    
                </td>
            </tr>
            
        </table>
        
       
    </div> 
    
    </div>
    </div>
      
    <script type="text/html" id="filterRowTemplate">
    <tr>
     @*<td width="30px"><a href="#" data-bind="style: { width: '15px'},click: function() { reportViewModel.removeLine($data) }"> X </a></td>*@
     <td width="30px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><a href="#" data-bind="style: { width: '15px'},visible: reportViewModel.ShowAdvancedFilter,click: function() { reportViewModel.moveLineUp($data) }">Up </a>
     <a href="#" data-bind="style: { width: '15px'},visible: reportViewModel.ShowAdvancedFilter,click: function() { reportViewModel.moveLineDown($data) }">Down</a>
     </td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    <td width="80px"> <span class="buttons" style="border-collapse:separate;" >  <button class="positive" data-bind="click: function() { reportViewModel.removeLine($data) }">  <img src="../../Content/images/garbageBtn.png"  alt=""/>Delete</button></span> </td>
    <td width="85px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><select class="required" data-bind="style: { width: '80px'},visible: reportViewModel.MarketShareLiveFilterDetailsList.indexOf($data) > 0, options: reportViewModel.AndOrList,optionsText: 'Name',optionsValue:'Name', value: AndOr"></select></td>
    <td width="35px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><input type="text" onkeypress="return openparen(event)" data-bind="style: { width: '30px'},value: OpenParenthesis, valueUpdate: 'afterkeydown'"/></td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    <td width="205px"><select class="required" data-bind="style: { width: '200px'},visible: AndOr,options: reportViewModel.DictionaryNonGeographicList,optionsText: 'FieldLabel',optionsValue:'Id', value: DataDictionaryId"></select></td>
    <td width="167px"><select class="required" data-bind="style: { width: '167px'},visible: AndOr && DataDictionaryId,options: reportViewModel.OperatorList,optionsText: 'Name',optionsValue:'Value', value: Operation"></select></td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    <td width="300px"><input class="required" type="text" data-bind="style: { width: '200px'},visible: AndOr && DataDictionaryId && Operation,value: FieldValue"/>  <span class="buttons" style="border-collapse:separate;" > <button class="positive" data-bind="visible: AndOr && DataDictionaryId && (FieldType()!='N' && FieldType()!='I' ),click: function(){reportViewModel.SetPicker($data)}"> <img src="../../Content/images/selectBtn.png"  alt=""/> Select</button> </span> </td>
    @*<a href="#" data-bind="visible: AndOr && DataDictionaryId && Operation,click: function(){reportViewModel.SetPicker($data)}">Picker</a>*@
    <td width="30px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><input type="text" onkeypress="return closeparen(event)" data-bind="style: { width: '30px'},value: CloseParenthesis, valueUpdate: 'afterkeydown'"/></td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    

    </tr>   
    </script>

    <script type="text/html" id="filterRowTemplateGeographic">
    <tr>
     @*<td width="30px"><a href="#" data-bind="style: { width: '15px'},click: function() { reportViewModel.removeLine($data) }"> X </a></td>*@
     <td width="30px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><a href="#" data-bind="style: { width: '15px'},visible: reportViewModel.ShowAdvancedFilter,click: function() { reportViewModel.moveLineUpGeographic($data) }">Up </a>
     <a href="#" data-bind="style: { width: '15px'},visible: reportViewModel.ShowAdvancedFilter,click: function() { reportViewModel.moveLineDownGeographic($data) }">Down</a>
     </td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    
    <td width="80px"> <span class="buttons" style="border-collapse:separate;">  <button class="positive" data-bind="click: function() { reportViewModel.removeLineGeographic($data) }">  <img src="../../Content/images/garbageBtn.png"  alt=""/>Delete</button></span> </td>
    <td width="85px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><select class="required" data-bind="style: { width: '80px'},visible: reportViewModel.MarketShareLiveFilterGeographicDetailsList.indexOf($data) > 0, options: reportViewModel.AndOrList,optionsText: 'Name',optionsValue:'Name', value: AndOr"></select></td>
    <td width="35px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><input type="text" onkeypress="return openparen(event)" data-bind="style: { width: '30px'},value: OpenParenthesis, valueUpdate: 'afterkeydown'"/></td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    <td width="205px"><select class="required" data-bind="style: { width: '200px'},visible: AndOr,options: reportViewModel.DictionaryGeographicList,optionsText: 'FieldLabel',optionsValue:'Id', value: DataDictionaryId"></select></td>
    <td width="167px"><select class="required" data-bind="style: { width: '167px'},visible: AndOr && DataDictionaryId,options: reportViewModel.OperatorList,optionsText: 'Name',optionsValue:'Value', value: Operation"></select></td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    <td width="300px"><input class="required" type="text" data-bind="style: { width: '200px'},visible: AndOr && DataDictionaryId && Operation,value: FieldValue"/>  <span class="buttons" style="border-collapse:separate;" > <button class="positive" data-bind="visible: AndOr && DataDictionaryId && (FieldType()!='N' && FieldType()!='I' ),click: function(){reportViewModel.SetPicker($data)}"> <img src="../../Content/images/selectBtn.png"  alt=""/> Select</button> </span> </td>
    
    @*<a href="#" data-bind="visible: AndOr && DataDictionaryId && Operation,click: function(){reportViewModel.SetPicker($data)}">Picker</a>*@
    <td width="30px" data-bind="visible: reportViewModel.ShowAdvancedFilter"><input type="text" onkeypress="return closeparen(event)" data-bind="style: { width: '30px'},value: CloseParenthesis, valueUpdate: 'afterkeydown'"/></td data-bind="visible: reportViewModel.ShowAdvancedFilter">
    

    </tr>   
    </script>
    
    

    <script type="text/javascript">
 //       $(function () {
 //           "use strict";
            // Proxy created on the fly
            
            //$.connection.hub.start({ transport: activeTransport }, function () {
            //   // alert("start hub");
            
            //    reportStatus.registerUser(reportViewModel.UserId());
        //});
        
        //function dothis(x){
        //    $('#DatePeriods').val($('#DatePeriods').val().replace(/[^\d]/ig, '')) 
        //}
            function getQueryVariable(variable) {
                var query = window.location.search.substring(1);
                var vars = query.split("&");
                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split("=");
                    if (pair[0] == variable) {
                        return unescape(pair[1]);
                    }
                }
            }

            var activeTransport = getQueryVariable('transport') || 'auto';

            $.connection.hub.start({ transport: activeTransport, waitForPageLoad: true })
                .done(function () {reportViewModel.IsConnected(true); reportStatus.registerUser(reportViewModel.UserId())})
                .fail(function () { reportViewModel.IsConnected(false); alert("Could not Connect!"); });
          

            var reportStatus = $.connection.reportGenerationHub;

            $("#runButton").click(function () {
                
                reportStatus.submitReport2(
                    reportViewModel.UserId(), 
                    getURLParam("reportRunGenId"), 
                    reportViewModel.UnitId(), 
                    reportViewModel.UserId(),
                    1);
            });

            reportStatus.addMessage = function (message) {
                //log(message);
                setmessage(message);
            };

            reportStatus.reloadGrid = function () {
                reloadGrid();
            };


  //      }); 

 
        //    // Declare a function on the reportNotificationHub hub so the server can invoke it
        //    reportnotification.addMessage = function (message) {
        //        alert(message);
        //       // $('#messages').append('<li>' + message + '</li>');
        //    };

        
        //    // Start the connection
        //    $.connection.hub.start();
        //});
    
        $('#tabContainer').tabs();
        $(document).ready(function () {
    
            // if (getURLParam("mode") == "live")
            // {
            // SetWizard(); 
            // setmessage("Request Validated");
            //var grid = $("#GridViewResults").data("tGrid");
            //grid.rebind();
     
            // }
            // MasterCheckBox functionality
            //Available grid
            $('#masterAvailablecheckbox').click(function () {
      
                if (this.checked) {
      
                    $('.availableCheck').attr('checked', 'checked');
                    for (var i in leftchecked) {   
                        leftchecked[i]=true;   
                    }
                } else {
      
                    $('.availableCheck').removeAttr('checked');
                    for (var i in leftchecked) {   
                        leftchecked[i]=false;   
                    }
                }
            });
            //selected grid
            $('#masterSelectedcheckbox').click(function () {
   
                if (this.checked) {
                    $('.selectedCheck').attr('checked', 'checked');
                    for (var i in rightchecked) {   
                        rightchecked[i]=true;   
                    }
                    //        reportViewModel.SelectedRightValues(reportViewModel.SelectedValues());
 
                } else {
                    $('.selectedCheck').removeAttr('checked');
                    for (var i in rightchecked) {   
                        rightchecked[i]=false;   
                    }
                }
            });
   


        });
  

        //clear the checked object whenever a filter or ajax occurs
       
        var DirtyDate = false;
        
        var IncompleteReports = 0;
       

        var leftchecked = {};
        var rightchecked = {};
        function onRowDataBoundReports(e) {
            
            if (e.dataItem.ReportStatus != "Completed") 
            {	
                
                $(e.row).addClass("rowerror");
                IncompleteReports = IncompleteReports + 1;
                
            }			
        }
        function onDataBoundReports(e) {
            
            reportViewModel.IncompleteReportCount(IncompleteReports)
            
        }
        function onDataBindingReports(e) {
            IncompleteReports = 0;
            //change to select all units
            //var unitId = reportViewModel.UnitId();
            var unitId = "";
            e.data = {
                   selectedUnitId : unitId
               
            };
        }
        function onDataBindingLeft(e) {
            leftchecked = {};
            rightchecked = {};
            var dataDictionaryId = reportViewModel.DataDictionaryID();
            var values = reportViewModel.SelectedValues();
            var dictDate = reportViewModel.DictionaryYear();
            var side = "A";
            e.data = {
                id : dataDictionaryId,
                selectedValues: values,
                activeDate: dictDate,
                availableOrSelected: side
        
            };
        }
        function onLoadLeft() {
            $(this).delegate(":checkbox","click",function() {
                if (this.value != "on")
                {        
                    leftchecked[this.value] = this.checked;
                }
                var comma = "";
                var selectedstring = "";
                reportViewModel.SelectedLeftValues("");
                var count = 0;
                var numChkBoxes = $('#AvailableTable input[type=checkbox]').length -1;
                for (var i in leftchecked) {  
                    if (leftchecked[i])
                    {
                        selectedstring += comma+i;
                        comma=","
                        count ++;
                    }
                }
                reportViewModel.SelectedLeftValues(selectedstring);
          
                if (numChkBoxes == count && numChkBoxes > 0) {
                    $('#masterAvailablecheckbox').attr('checked','checked');
                }
                else {
                    $('#masterAvailablecheckbox').removeAttr('checked');
                }
            });
            $(this).find(".t-filter").click(function () {
                setTimeout(function () {
                    $(".t-filter-operator").each(function () {
                        $(this).val("substringof");
                    });
                });
            });
        }
        
        function onRowSelectedSingle(e) {
            var selectedvalue = e.row.cells[0].innerHTML;
            reportViewModel.SaveSinglePicker(selectedvalue);
            // reportViewModel.SelectedSingleValues(selectedstring);
          
        }
        function onDataBindingSingle(e) {
            
            var dataDictionaryId = reportViewModel.DataDictionaryID();
            var values = "";
            var dictDate = reportViewModel.DictionaryYear();
            var side = "Z";
            e.data = {
                id : dataDictionaryId,
                selectedValues: values,
                activeDate: dictDate,
                availableOrSelected: side
        
            };
        }    




        function onRowDataBoundLeft(e) {

            var dataItem = e.dataItem;
    
            leftchecked[dataItem.FieldValue] = false;
    


        }
        function onDataBindingRight(e) {
            leftchecked = {};
            rightchecked = {};
            var dataDictionaryId = reportViewModel.DataDictionaryID();
            var values = reportViewModel.SelectedValues();
            var dictDate = reportViewModel.DictionaryYear();
            var side = "S";
            e.data = {
                id : dataDictionaryId,
                selectedValues: values,
                activeDate: dictDate,
                availableOrSelected: side
        
            };
        }
   
        function onLoadRight() {
            $(this).delegate(":checkbox","click",function() {
                if (this.value != "on")
                {        
                    rightchecked[this.value] = this.checked;
                }
                var comma = "";
                var selectedstring = "";
                reportViewModel.SelectedRightValues("");
                var count = 0;
                var numChkBoxes = $('#SelectedTable input[type=checkbox]').length -1;
                for (var i in rightchecked) {  
                    if (rightchecked[i])
                    {
                        selectedstring += comma+i;
                        comma=","
                        count ++;
                    }
                }
                reportViewModel.SelectedRightValues(selectedstring);
          
                if (numChkBoxes == count && numChkBoxes > 0) {
                    $('#masterSelectedcheckbox').attr('checked','checked');
                }
                else {
                    $('#masterSelectedcheckbox').removeAttr('checked')
                }
            });

            $(this).find(".t-filter").click(function () {
                setTimeout(function () {
                    $(".t-filter-operator").each(function () {
                        $(this).val("substringof");
                    });
                });
            });
        }
        function onRowDataBoundRight(e) {
            var dataItem = e.dataItem;
    
            rightchecked[dataItem.FieldValue] = false;
    

        }
        //reset message on tabclick
        function onTabClick() {
            reportViewModel.QueryMessage("");
        }
  
        //.function calLed by picker sorts
        function sortByFieldValue(a, b) {
            var x = a.FieldValue.toLowerCase();
            var y = b.FieldValue.toLowerCase();
            return ((x < y) ? -1 : ((x > y) ? 1 : 0));
        }

        //function to only allow "("
        function openparen(e) {
            var k;
            document.all ? k = e.keyCode : k = e.which;
            return (k == 40 );
        }

        //function to only allow ")"
        function closeparen(e) {
            var k;
            document.all ? k = e.keyCode : k = e.which;
            return (k == 41 );
        }

        ///function to see if a value is found in an array
        function isInArray(arr, obj) { 
            for(var i=0; i<arr.length; i++) { 
                if (arr[i] == obj) return true; 
            } 
        } 
        function FindInArray(arr, obj) { 
            for(var i=0; i<arr.length; i++) { 
                if (arr[i].Id() == obj) return i; 
            } 
        } 
    
        //View Model data 
        var Mha = Mha || {};
        Mha.Report = function (model){
            return {
                //model fields
                IsConnected: ko.observable(false),
                Id: ko.observable(model.Id),
                ReportDefinitionsId: ko.observable(model.ReportDefinitionsId),           
                UserId: ko.observable(model.UserId),
                UnitId: ko.observable(model.UnitId),
                ReportTypesId: ko.observable(model.ReportTypesId),
                ReportGroupsId: ko.observable(model.ReportGroupsId),
                ModuleId: ko.observable(model.ModuleId),
                IsBaseReport: ko.observable(model.IsBaseReport),
                IsGlobalShare: ko.observable(model.IsGlobalShare),
                IsTemplateReport: ko.observable(model.IsTemplateReport),
                Description: ko.observable(model.Description),
                NewFilterName: ko.observable(model.NewFilterName),
                NewGeographicFilterName: ko.observable(model.NewGeographicFilterName),
                Summary: ko.observable(model.Summary),
                BaseYear: ko.observable(model.BaseYear),
                YearType: ko.observable(model.YearType),
                Trending: ko.observable(model.Trending),
                DatePeriodType: ko.observable(model.DatePeriodType),
                DatePeriods: ko.observable(model.DatePeriods),
                DateCalculationType: ko.observable(model.DateCalculationType),
                OutputType: ko.observable(model.OutputType),
                StartYearMonth: ko.observable(model.StartYearMonth),
                EndYearMonth: ko.observable(model.EndYearMonth),
                InitialEndYearMonth: ko.observable(model.EndYearMonth),
                DataType1: ko.observable(model.DataType1),
                DataType2: ko.observable(model.DataType2),
                DataType3: ko.observable(model.DataType3),
                MarketLevel: ko.observable(model.MarketLevel),
                Field1: ko.observable(model.Field1),
                Field1SortBy: ko.observable(model.Field1SortBy),
                Field1AscDesc: ko.observable(model.Field1AscDesc),
                Field1Group: ko.observable(model.Field1Group),
                Field1Records: ko.observable(model.Field1Records),
                Field1TopN: ko.observable(model.Field1TopN),
                Field1TopNPercent: ko.observable(model.Field1TopNPercent),
                Field2: ko.observable(model.Field2),
                Field2SortBy: ko.observable(model.Field2SortBy),
                Field2AscDesc: ko.observable(model.Field2AscDesc),
                Field2Group: ko.observable(model.Field2Group),
                Field2Records: ko.observable(model.Field2Records),
                Field2TopN: ko.observable(model.Field2TopN),
                Field2TopNPercent: ko.observable(model.Field2TopNPercent),
                Field3: ko.observable(model.Field3),
                Field3SortBy: ko.observable(model.Field3SortBy),
                Field3AscDesc: ko.observable(model.Field3AscDesc),           
                Field3Group: ko.observable(model.Field3Group),
                Field3Records: ko.observable(model.Field3Records),
                Field3TopN: ko.observable(model.Field3TopN),
                Field3TopNPercent: ko.observable(model.Field3TopNPercent),
                ShowDischargesHospital: ko.observable(model.ShowDischargesHospital),
                ShowDischargesState: ko.observable(model.ShowDischargesState),
                ShowDischargesPercent: ko.observable(model.ShowDischargesPercent),
                ShowLOSHospital: ko.observable(model.ShowLOSHospital),
                ShowLOSState: ko.observable(model.ShowLOSState),
                ShowLOSPercent: ko.observable(model.ShowLOSPercent),
                ShowHospitalPercent: ko.observable(model.ShowHospitalPercent),
                ShowLOSHospitalPercent: ko.observable(model.ShowLOSHospitalPercent),
                ShowField1: ko.observable(model.ShowField1),
                ShowField1Description: ko.observable(model.ShowField1Description),
                ShowField2: ko.observable(model.ShowField2),
                ShowField2Description: ko.observable(model.ShowField2Description),
                ShowField3: ko.observable(model.ShowField3),
                ShowField3Description: ko.observable(model.ShowField3Description),
                Column1Text: ko.observable("Hospital Discharges"),
               Column2Text: ko.observable("Total Discharges"),
               Column3Text: ko.observable("Market Share of Discharges"),
               Column4Text: ko.observable("Discharge Market Dependence"),
               Column5Text: ko.observable("Hospital LOS"),
               Column6Text: ko.observable("Total LOS"),
               Column7Text: ko.observable("Market Share of LOS"),
               Column8Text: ko.observable("LOS Market Dependence"),
                ReportDriver: ko.observable("MKTSHARE"),
                ShowSummary: ko.observable(model.ShowSummary),
                ShowFilter: ko.observable(model.ShowFilter),
                FilterIdGeographic: ko.observable(model.FilterIdGeographic),
                FilterIdCase: ko.observable(model.FilterIdCase),
                ActionMethod: ko.observable(model.ActionMethod),
                ShowAdvancedFilter: ko.observable(model.ShowAdvancedFilter),
               // ForceShowAdvancedFilter: ko.observable(true),
               // CaseAdvanced: ko.observable(false),
               // GeographicAdvanced: ko.observable(false),
                IsReportRun: ko.observable(false),
                ReportRunGenId: ko.observable(getURLParam("reportRunGenId")),
                RequestMessage: ko.observable(''),
                DateErrorMessage: ko.observable(''),
                InvalidDate: ko.observable(''),
                TrendOn: ko.observable('Off'),
                TrendOnPeriod: ko.observable('M'),
                TrendOnSort: ko.observable('ASC'),
                IncompleteReportCount:ko.observable(0),
                WizardTab:ko.observable('@ViewBag.TabIndex'),
                QueryMessage: ko.observable('@ViewBag.QueryMessage'),
                SummaryMessage: ko.observable('@ViewBag.SummaryMessage'),
                InvalidReport: ko.observable('@ViewBag.InvalidReport'),
                GeographicFilterMessage: ko.observable('@ViewBag.GeographicFilterMessage'),
                CaseFilterMessage: ko.observable('@ViewBag.CaseFilterMessage'),
                IsHost:ko.observable('@ViewBag.IsHost' == 'True'),
                //Save method
                Save: function($form) {
             
                    reportViewModel.GetFieldSorts();
                    ko.utils.postJson($form.attr('action'),{model: ko.toJS(this)});
                },
        
                //Build Lists 
                SortList: ko.observableArray([{"Name":"Field Description","Value":"DESCRIPTION"},{"Name":"Field Value","Value":"FIELDVALUE"}
                ,{"Name":"Hospital Discharges","Value":"FACILDISCH"},{"Name":"Comparison Discharges","Value":"STATEDISCH"}
                ,{"Name":"Percent Discharges","Value":"DISCHMKTSHARE"},{"Name":"Hospital LOS","Value":"FACILLOS"},
                {"Name":"Comparison LOS","Value":"STATELOS"},{"Name":"Percent LOS","Value":"LOSMKTSHARE"}]),       
                AscDescList: ko.observableArray([{"Name":"Desc.","Value":"DESC"},{"Name":"Asc.","Value":"ASC"}]),  
                RecordsList: ko.observableArray([{"Name":"All Records","Value":"All"},{"Name":"Top 5","Value":"Top 5"},{"Name":"Top 10","Value":"Top 10"}
                ,{"Name":"Top 20","Value":"Top 20"},{"Name":"Top 30","Value":"Top 30"}
                 ,{"Name":"Top 40","Value":"Top 40"},{"Name":"Top 50","Value":"Top 50"}
                  ,{"Name":"Top 60","Value":"Top 60"},{"Name":"Top 70","Value":"Top 70"}
                   ,{"Name":"Top 80","Value":"Top 80"},{"Name":"Top 90","Value":"Top 90"} ,{"Name":"Top 100","Value":"Top 100"}
                ]),  
                DictionaryList: ko.observableArray(ko.utils.arrayMap(model.DictionaryList,function (dictline){return new Mha.DictionaryLine(dictline);})|| []),
                DictionaryNonGeographicList: ko.observableArray(ko.utils.arrayMap(model.DictionaryNonGeographicList,function (dictline3){return new Mha.DictionaryLine(dictline3);})|| []),
                DictionaryGeographicList: ko.observableArray(ko.utils.arrayMap(model.DictionaryGeographicList,function (dictline2){return new Mha.DictionaryLine(dictline2);})|| []),
                DateList: ko.observableArray(ko.utils.arrayMap(model.DateList,function (dline){return new Mha.DateLine(dline);})|| []),
                GeographicFilterList: ko.observableArray(ko.utils.arrayMap(model.GeograhicFilterList,function (line){return new Mha.FilterListLine(line);})|| []),
                CaseFilterList: ko.observableArray(ko.utils.arrayMap(model.CaseFilterList,function (line){return new Mha.FilterListLine(line);})|| []),
                LevelList: ko.observableArray([{"Name":"One Field","Value":"1"},{"Name":"Two Fields","Value":"2"}]),
                TrendingList: ko.observableArray([{"Name":"No Trending","Value":"0"},{"Name":"Annual Trending - from newest to oldest dates","Value":"YDESC"}
                ,{"Name":"Annual Trending - from oldest to newest dates","Value":"YASC"}
                ,{"Name":"Quartly Trending - from newest to oldest dates","Value":"QDESC"}
                ,{"Name":"Quarterly Trending - from oldest to newest dates","Value":"QASC"}
                ,{"Name":"Monthly Trending - from newest to oldest dates","Value":"MDESC"}
                ,{"Name":"Monthly Trending - from oldest to newest dates","Value":"MASC"}]),
                Trend: ko.observableArray([{"Name":"No Trending","Value":"Off"},{"Name":"Trending","Value":"On"}]),
                TrendPeriod: ko.observableArray([{"Name":"Monthly","Value":"M"},{"Name":"Calendar Quarter","Value":"Q"},{"Name":"Calendar Year","Value":"Y"}]),
                TrendSort: ko.observableArray([{"Name":"Ascending - from oldest to newest dates","Value":"ASC"},{"Name":"Descending - from newest to oldest dates","Value":"DESC"}]),
                PeriodTypeList: ko.observableArray([{"Name":"Month(s)","Value":"M"},{"Name":"Quarter(s)","Value":"Q"},{"Name":"Year(s)","Value":"A"},{"Name":"Year(s) + Year to Date","Value":"Y"}]),  
                PatientTypeList: ko.observableArray([{"Name":"Inpatient","Value":"I"},{"Name":"Outpatient","Value":"O"},{"Name":"Expanded Outpatient","Value":"EO"}]),  
                DateTypeList: ko.observableArray([{"Name":"Enter Dates","Value":"E"},{"Name":"Last x periods","Value":"C"}]), 
                OutputTypeList: ko.observableArray([{"Name":"Excel","Value":"Excel"},{"Name":"Excel - Unformatted","Value":"ExcelNoFormat"},{"Name":"Excel - with Graph","Value":"ExcelGraph"},{"Name":"Excel 2003 - with Graph","Value":"ExcelGraph2003"}]),  
                //filteringExcel 2007 plus with Graph 
                MarketShareLiveFilterGeographicDetailsList: ko.observableArray(ko.utils.arrayMap(model.MarketShareLiveFilterGeographicDetailsList,function (filterline){return new Mha.FilterLine(filterline);})|| []), 
                addLineGeographic: function() { this.MarketShareLiveFilterGeographicDetailsList.push(new  Mha.newfilterLine(this.Id,this.Id,'AND','(',null,null,null,')','0',99,'','')) },
                removeLineGeographic:function(line) { this.MarketShareLiveFilterGeographicDetailsList.remove(line) },
                moveLineUpGeographic: function (line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterGeographicDetailsList, line); if (position > 0) { this.MarketShareLiveFilterGeographicDetailsList.remove(line); this.MarketShareLiveFilterGeographicDetailsList.splice(position - 1, 0, line); } },
                moveLineDownGeographic:function(line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterGeographicDetailsList,line);this.MarketShareLiveFilterGeographicDetailsList.remove(line);this.MarketShareLiveFilterGeographicDetailsList.splice(position+1, 0, line); },
                MarketShareLiveFilterDetailsList: ko.observableArray(ko.utils.arrayMap(model.MarketShareLiveFilterDetailsList,function (filterline){return new Mha.FilterLine(filterline);})|| []), 
                AndOrList: ko.observableArray([{"Name":"AND"},{"Name":"OR"}]),
                OperatorList: ko.observableArray([{"Name":"Equal to","Value":"="},{"Name":"Not Equal to","Value":"!="},{"Name":"Greater than","Value":">"},{"Name":"Greater than or Equal to","Value":">="},{"Name":"Less than","Value":"<"},{"Name":"Less than or Equal to","Value":"<="}]),
                addLine: function() { this.MarketShareLiveFilterDetailsList.push(new  Mha.newfilterLine(this.Id,this.Id,'AND','(',null,null,null,')','0',99,'','')) },
                removeLine:function(line) { this.MarketShareLiveFilterDetailsList.remove(line) },
                moveLineUp: function (line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterDetailsList, line); if (position > 0) { this.MarketShareLiveFilterDetailsList.remove(line); this.MarketShareLiveFilterDetailsList.splice(position - 1, 0, line); }},
                moveLineDown:function(line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterDetailsList,line);this.MarketShareLiveFilterDetailsList.remove(line);this.MarketShareLiveFilterDetailsList.splice(position+1, 0, line); },
                MarketShareLiveFilterCensusDetailsList: ko.observableArray(ko.utils.arrayMap(model.MarketShareLiveFilterCensusDetailsList,function (filterline){return new Mha.FilterLine(filterline);})|| []), 
                addLineCensus: function() { this.MarketShareLiveFilterCensusDetailsList.push(new  Mha.newfilterLine(this.Id,this.Id,'AND','(',null,null,null,')','0',99,'','')) },
                removeLineCensus:function(line) { this.MarketShareLiveFilterCensusDetailsList.remove(line) },
                moveLineUpCensus: function (line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterCensusDetailsList, line); if (position > 0) { this.MarketShareLiveFilterCensusDetailsList.remove(line); this.MarketShareLiveFilterCensusDetailsList.splice(position - 1, 0, line); } },
                moveLineDownCensus:function(line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterCensusDetailsList,line);this.MarketShareLiveFilterCensusDetailsList.remove(line);this.MarketShareLiveFilterCensusDetailsList.splice(position+1, 0, line); },
                MarketShareLiveFilterCompareDetailsList: ko.observableArray(ko.utils.arrayMap(model.MarketShareLiveFilterCompareDetailsList,function (filterline){return new Mha.FilterLine(filterline);})|| []), 
                addLineCompare: function() { this.MarketShareLiveFilterCompareDetailsList.push(new  Mha.newfilterLine(this.Id,this.Id,'AND','(',null,null,null,')','0',99,'','')) },
                removeLineCompare:function(line) { this.MarketShareLiveFilterCompareDetailsList.remove(line) },
                moveLineUpCompare: function (line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterCompareDetailsList, line); if (position > 0) { this.MarketShareLiveFilterCompareDetailsList.remove(line); this.MarketShareLiveFilterCompareDetailsList.splice(position - 1, 0, line); } },
                moveLineDownCompare:function(line) { var position = ko.utils.arrayIndexOf(this.MarketShareLiveFilterCompareDetailsList,line);this.MarketShareLiveFilterCompareDetailsList.remove(line);this.MarketShareLiveFilterCompareDetailsList.splice(position+1, 0, line); },
                FieldLabel: ko.observable(""),
                DictionaryYear: ko.observable("12/31/2011"),
                SelectColumnsVisible: ko.observable(false),
                SelectColumns: function() {
                    if (this.SelectColumnsVisible() == true) {                  
                        this.SelectColumnsVisible(false);
                    }
                    else {
           
                        this.SelectColumnsVisible(true);
             
                        $("#divSelectColumns").dialog({ height: 200,width: 1000,show: 'fadein',hide:'fadeout',modal: true,title: 'Select Visible Columns' ,position:['center']});
  

                    }
                },
                PickerVisible: ko.observable(false),
                PickerSingleVisible: ko.observable(false),
                SaveReportVisible: ko.observable(false),
                DataDictionaryID: ko.observable("1cb79aad-1409-45c6-b3d8-2c46c5aa1d8f"),
                SelectedSingleValues: ko.observable(""),
                SelectedValues: ko.observable(""),
                SelectedLeftValues: ko.observable(""),
                SelectedRightValues: ko.observable(""),

                SQLStatement: ko.observable(""),
                ShowOn: ko.observable(false),

                PickerData: ko.observableArray([]),

                addRequested: function(){
                    var SelectedString = this.SelectedValues();
                
                    var comma = ",";
                    if (SelectedString.length < 1)
                    {
                        comma = "";
                    }
                    for (var i in leftchecked) {  
                        if (leftchecked[i])
                        {
             
                            SelectedString += comma + i;
                            comma = ",";
                        }
                    }

                    this.SelectedValues(SelectedString); 
           
                    rightchecked = {};
                    leftchecked = {};
                    reportViewModel.SelectedRightValues("");
                    reportViewModel.SelectedLeftValues("");
                    $('#masterAvailablecheckbox').removeAttr('checked');
                    $('#masterSelectedcheckbox').removeAttr('checked');
                    var grid = $("#AvailableGrid").data("tGrid");
                    grid.rebind();
                    grid = $("#SelectedGrid").data("tGrid");
                    grid.rebind();
                           
                }, 
                       
                removeRequested: function(){
                    var SelectedString = this.SelectedValues();
                    for (var i in rightchecked) {  
                        if (rightchecked[i])
                        {
             
                            SelectedString =  SelectedString.replace(i+",","");
                            SelectedString =  SelectedString.replace(","+i,"");
                            SelectedString =  SelectedString.replace(i,"");
                        }
                    }

                    this.SelectedValues(SelectedString); 
                    rightchecked = {};
                    leftchecked = {};
                    reportViewModel.SelectedRightValues("");
                    reportViewModel.SelectedLeftValues("");
                    $('#masterAvailablecheckbox').removeAttr('checked');
                    $('#masterSelectedcheckbox').removeAttr('checked');
                    var grid = $("#AvailableGrid").data("tGrid");
                    grid.rebind();
                    grid = $("#SelectedGrid").data("tGrid");
                    grid.rebind();
                            

                },

                showSQL: function() {
                    if (this.ShowOn() == true)
                    {this.ShowOn(false);}
                    else{
                        //BuildSQL();
                        this.ShowOn(true);
                    }
                },
                CloseSaveReport: function() {          
                    this.SaveReportVisible(false);
                    $("#divSaveReport").dialog("close");              
                },
                OpenSaveReport: function() {
                    if (this.SaveReportVisible() == true) {                  
                        this.SaveReportVisible(false);
                    }
                    else {
             
                        this.SaveReportVisible(true);
             
                        $("#divSaveReport").dialog({ height: 140,width: 450,show: 'fadein',hide:'fadeout',modal: true,title: 'Save Report' ,position:['center']});
  

                    }
                },
           
                ClosePicker: function() {          
                    this.PickerVisible(false);
                    $("#divPicker").dialog("close");              
                },
           
                SavePicker: function() {
                    var dictionaryid = this.PickerData.DataDictionaryId();         
                    
                    Mha.ReFormatLookups(dictionaryid,this.SelectedValues(), this.DictionaryYear());
                    this.PickerVisible(false);
                    $("#divPicker").dialog("close");        
                },
                CloseSinglePicker: function() {          
                    this.PickerSingleVisible(false);
                    $("#divSinglePicker").dialog("close");              
                },
           
                SaveSinglePicker: function(selval) {
                    //var dictionaryid = this.PickerData.DataDictionaryId();         
                    reportViewModel.PickerData.FieldValue(selval);
                   // Mha.SetSinglePickerValue(this.SelectedValues());
                    this.PickerSingleVisible(false);
                    $("#divSinglePicker").dialog("close");        
                },
                ViewReport: function(){
           
                    Mha.ViewReport(this.ReportRunGenId());
                },
           
                SetPicker: function(line) {
                    if (this.PickerVisible() == true || this.PickerSingleVisible() == true) {                  
                        this.PickerVisible(false);
                        this.PickerSingleVisible(false);
                    }
                    else {
                        var dictionaryid = line.DataDictionaryId(); 
                        //this should work for both filter types since it has all recs in it        
                        var index = FindInArray(reportViewModel.DictionaryList(),dictionaryid);
                        this.FieldLabel(reportViewModel.DictionaryList()[index].FieldLabel());      
                        //this.PickerRequested([]);        
                        var enteredValue = line.FieldValue();
                        var operation = line.Operation();
                        reportViewModel.DataDictionaryID(dictionaryid);
                        

                            
                            if (operation == "=" || operation == "!=")
                            {
                                //pausecomp(1250);
                                Mha.DeFormatLookups(dictionaryid,enteredValue, this.DictionaryYear(),operation);

             

                                this.PickerData = line;
                            this.PickerVisible(true);
             
                            $("#divPicker").dialog({ height: 640,width: 1150,show: 'fadein',hide:'fadeout',modal: true,title: 'Select Filter' ,position:['center']});
                        }
                        else
                            {
                                Mha.SingleLookups(dictionaryid,enteredValue, this.DictionaryYear(),operation);
                                reportViewModel.SelectedSingleValues(enteredValue);
                                this.PickerData = line;
                            this.PickerSingleVisible(true);
             
                            $("#divSinglePicker").dialog({ height: 640,width: 1150,show: 'fadein',hide:'fadeout',modal: true,title: 'Select Filter' ,position:['center']});
                        }

                    }
                },
                    
                //FUNCTIONS
                
                GetFieldSorts: function(){
                    var field1Sorts = getColumnSorts("Field1");
                    if (field1Sorts.Index != -1)
                    {
                        if (field1Sorts.Index == 2){
                            reportViewModel.Field1SortBy("FIELD1DESCRIPTION");}
                        if (field1Sorts.Index == 1){
                            reportViewModel.Field1SortBy("FIELD1");}
                        if (field1Sorts.Index == 3){
                            reportViewModel.Field1SortBy("FACILDISCH");}
                        if (field1Sorts.Index == 4){
                            reportViewModel.Field1SortBy("STATEDISCH");}
                        if (field1Sorts.Index == 5){
                            reportViewModel.Field1SortBy("DISCHMKTSHARE");
                        }
                        if (field1Sorts.Index == 6) {
                            reportViewModel.Field1SortBy("DISCHHOSPSHARE");
                        }
                        if (field1Sorts.Index == 7){
                            reportViewModel.Field1SortBy("FACILLOS");}
                        if (field1Sorts.Index == 8){
                            reportViewModel.Field1SortBy("STATELOS");}
                        if (field1Sorts.Index == 9){
                            reportViewModel.Field1SortBy("LOSMKTSHARE");
                        }
                        if (field1Sorts.Index == 10) {
                            reportViewModel.Field1SortBy("LOSHOSPSHARE");
                        }
                        reportViewModel.Field1AscDesc(field1Sorts.AscDesc)                
                    }
                    else{
                        //set a default sort
                        reportViewModel.Field1SortBy("FIELD1");
                        reportViewModel.Field1AscDesc("DESC");
                    }
             
                    var field2Sorts = getColumnSorts("Field2");
                    if (field2Sorts.Index != -1)
                    {
                        if (field2Sorts.Index == 2){
                            reportViewModel.Field2SortBy("FIELD2DESCRIPTION");}
                        if (field2Sorts.Index == 1){
                            reportViewModel.Field2SortBy("FIELD2");}
                        if (field2Sorts.Index == 3){
                            reportViewModel.Field2SortBy("FACILDISCH");}
                        if (field2Sorts.Index == 4){
                            reportViewModel.Field2SortBy("STATEDISCH");}
                        if (field2Sorts.Index == 5){
                            reportViewModel.Field2SortBy("DISCHMKTSHARE");
                        }
                        if (field2Sorts.Index == 6) {
                            reportViewModel.Field2SortBy("DISCHHOSPSHARE");
                        }
                        if (field2Sorts.Index == 7){
                            reportViewModel.Field2SortBy("FACILLOS");}
                        if (field2Sorts.Index == 8){
                            reportViewModel.Field2SortBy("STATELOS");}
                        if (field2Sorts.Index == 9){
                            reportViewModel.Field2SortBy("LOSMKTSHARE");
                        }
                        if (field2Sorts.Index == 10) {
                            reportViewModel.Field2SortBy("LOSHOSPSHARE");
                        }
                        reportViewModel.Field2AscDesc(field2Sorts.AscDesc)                
                    }
                    else{
                        //set a default sort
                        reportViewModel.Field2SortBy("FIELD2");
                        reportViewModel.Field2AscDesc("DESC");
                    }
              
                    var field3Sorts = getColumnSorts("Field3");
                    if (field3Sorts.Index != -1)
                    {
                        if (field3Sorts.Index == 2){
                            reportViewModel.Field3SortBy("FIELD3DESCRIPTION");}
                        if (field3Sorts.Index == 1){
                            reportViewModel.Field3SortBy("FIELD3");}
                        if (field3Sorts.Index == 3){
                            reportViewModel.Field3SortBy("FACILDISCH");}
                        if (field3Sorts.Index == 4){
                            reportViewModel.Field3SortBy("STATEDISCH");}
                        if (field3Sorts.Index == 5){
                            reportViewModel.Field3SortBy("DISCHMKTSHARE");
                        }
                        if (field3Sorts.Index == 6) {
                            reportViewModel.Field3SortBy("DISCHHOSPSHARE");
                        }
                        if (field3Sorts.Index == 7){
                            reportViewModel.Field3SortBy("FACILLOS");}
                        if (field3Sorts.Index == 8){
                            reportViewModel.Field3SortBy("STATELOS");}
                        if (field3Sorts.Index == 9){
                            reportViewModel.Field3SortBy("LOSMKTSHARE");
                        }
                        if (field3Sorts.Index == 10) {
                            reportViewModel.Field3SortBy("LOSHOSPSHARE");
                        }
                        reportViewModel.Field3AscDesc(field3Sorts.AscDesc)                
                    }
                    else{
                        //set a default sort
                        reportViewModel.Field3SortBy("FIELD3");
                        reportViewModel.Field3AscDesc("DESC");
                    }
             
                }
            }
        };
           
        //outside viewmodel
         
           
        Mha.FilterLine = function(model){
            // this.MarketShareLiveReportDataId(model.MarketShareReportDataId);
            this.AndOr= ko.observable(model.AndOr);
            this.CloseParenthesis= ko.observable(model.CloseParenthesis);
            this.DataDictionaryId= ko.observable(model.DataDictionaryId);
            this.DateField= ko.observable(model.DateField);
            this.FieldValue= ko.observable(model.FieldValue);
            this.FilterId= ko.observable(model.FilterId);
            this.Id= ko.observable(model.Id);
            this.OpenParenthesis= ko.observable(model.OpenParenthesis);
            this.Operation= ko.observable(model.Operation);
            this.FieldType= ko.observable(model.FieldType);
            this.Sequence= ko.observable(model.Sequence);
            this.SQLText= ko.observable(model.SQLText);
            this.DataDictionaryId.subscribe(function () {
                this.FieldValue("");
                
                var dictionaryid = this.DataDictionaryId();
                //this should work for both filter types since it has all recs in it        
                var index = FindInArray(reportViewModel.DictionaryList(), dictionaryid);
                
                this.FieldType(reportViewModel.DictionaryList()[index].FieldType());
                
            }.bind(this));
          
        };

        //Define the structure of the new filter line with abiltity to send in defaults
        Mha.newfilterLine = function(pFilterId,pId,pAndOr,pOpenParenthesis,pDataDictionaryId,pOperation,pFieldValue,pCloseParenthesis,pDateField,pSequence,pSQLText,pFieldType) {
                
            this.AndOr = ko.observable(pAndOr);
            this.CloseParenthesis = ko.observable(pCloseParenthesis);
            this.DataDictionaryId = ko.observable(pDataDictionaryId);
            this.DateField = ko.observable(pDateField);
            this.FieldValue = ko.observable(pFieldValue);
            this.FilterId = ko.observable(pFilterId);
            this.Id = ko.observable(pId);
            this.OpenParenthesis = ko.observable(pOpenParenthesis);
            this.Operation = ko.observable(pOperation);
            this.FieldType = ko.observable(pFieldType);
            this.Sequence = ko.observable(pSequence);
            this.SQLText = ko.observable(pSQLText);
            this.DataDictionaryId.subscribe(function () {
                this.FieldValue("");
                
                var dictionaryid = this.DataDictionaryId();
                //this should work for both filter types since it has all recs in it        
                var index = FindInArray(reportViewModel.DictionaryList(), dictionaryid);
                
                this.FieldType(reportViewModel.DictionaryList()[index].FieldType());

            }.bind(this));
        }
       

        Mha.PickerItem = function(model){
            return {
                FieldName: ko.observable(model.FieldName),
                FieldValue: ko.observable(model.FieldValue)
            }
        }
        //refresh the filters
       // Mha.RunReport = function () {
       //     setmessage(reportViewModel.Description()+" - Report was Submitted");
       //     reportViewModel.QueryMessage("");
       //     $.ajax({


       //         url: '@Url.Action("Run", "Report")',
       //         data: { id: getURLParam("reportRunGenId"), unitId: reportViewModel.UnitId, mode: getURLParam("mode") },
       //         type: 'POST',
       //         success: function (data) {
       //             alert(data);
        
      //              reportViewModel.IsReportRun(true);
        
                      
        //        },
        //        error: function () { setmessage("Request Failed"); }
       //     });
        

      // };
        

            
        //takes the simple string and calls the server to return a full comma delimted list
        Mha.DeFormatLookups = function(dictionaryId,fieldvalue,dictionaryYear,operation)
        {
        
            $.ajax({
                    
                url: '@Url.Action("DeformatLookup", "Filter")',
                data: { id: dictionaryId, selectedValues: fieldvalue, activeDate: dictionaryYear, operation: operation },
                type: 'GET',
                success: function (data) {
							
                            
                    fieldvalue = data;
                    rightchecked = {};
                    leftchecked = {};
                    reportViewModel.SelectedValues(fieldvalue);

                    var grid = $("#AvailableGrid").data("tGrid");
                    grid.rebind();
                    grid = $("#SelectedGrid").data("tGrid");
                    grid.rebind();
                    // in the error function.. temp removed alert('failure');
                            
                },   error: function(){        }
            });
                     
        };
        //takes the simple string and calls the server to return a full comma delimted list
        Mha.SingleLookups = function(dictionaryId,fieldvalue,dictionaryYear,operation)
        {
        
            $.ajax({
                    
                url: '@Url.Action("DeformatLookup", "Filter")',
                data: { id: dictionaryId, selectedValues: fieldvalue, activeDate: dictionaryYear, operation: operation },
                type: 'GET',
                success: function (data) {
							
                            
                    fieldvalue = data;
                    
                    reportViewModel.SelectedSingleValues(fieldvalue);

                    var grid = $("#SinglePickerGrid").data("tGrid");
                    grid.rebind();
                    
                    // in the error function.. temp removed alert('failure');
                            
                },   error: function(){        }
            });
                     
        };
        Mha.PostEdit = function()
        {
         
         
            var url = '@Url.Action("Edit", "Report", new { reporttoRunId = "Id1" })';
            $.post(url);
               
           
					
        };
        Mha.ViewReport = function(Id1)
        {
         
            if (Id1 != null)
            {
          
                var url = '@Url.Action("View", "Report", new { reporttoRunId = "Id1" })';
                var newurl = url.replace("Id1",Id1);
                //  alert(newurl);
                window,open(newurl);
            }
					
        };
        //takes the comma delimted list and calls the server to reformat it back to simple
        Mha.ReFormatLookups = function(dictionaryId,fieldvalue,dictionaryYear)
        {
      
            $.ajax({
                url: '@Url.Action("ReformatLookup", "Filter")',
                data: {id: dictionaryId, selectedValues: fieldvalue, activeDate: dictionaryYear },
                        
                type: 'POST',
                success: function (data) {
                    if (data == "All")
                    {
                        data = "";
                        alert('Selecting all possible values in a filter is invalid.');
                    }		
                    reportViewModel.PickerData.FieldValue(data);
                    // in the error function.. temp removed alert('failure');
                },   error: function(){       }

            });
        };
        Mha.SetSinglePickerValue = function(fieldvalue)
        {
  						
                    reportViewModel.PickerData.FieldValue(fieldvalue);
           
        };

          
        //object class
        Mha.DictionaryLine = function(model){
            return {
                CodedField: ko.observable(model.CodedField),
                CodedJoinField: ko.observable(model.CodedJoinField),
                CodedTable: ko.observable(model.CodedTable),
                EndDate: ko.observable(model.EndDate),
                FieldLabel: ko.observable(model.FieldLabel),
                FieldName: ko.observable(model.FieldName),
                FieldType: ko.observable(model.FieldType),
                Id: ko.observable(model.Id),
                IsCoded: ko.observable(model.IsCoded),
                IsGeographic: ko.observable(model.IsGeographic),
                IsLookup: ko.observable(model.IsLookup),
                IsUdf: ko.observable(model.IsUdf),
                LookupName: ko.observable(model.LookupName),
                PickListSort: ko.observable(model.PickListSort),
                StartDate: ko.observable(model.StartDate),
                UdfId: ko.observable(model.UdfId),
                UdfTable: ko.observable(model.UdfTable)
            }}
        //object class
        Mha.DateLine = function(model){
            return {
               
                Id: ko.observable(model.Id),
                YearMonth: ko.observable(model.YearMonth),              
                Description: ko.observable(model.Description)
            }}
        Mha.FilterListLine = function(model){
          
            return {
                Id: ko.observable(model.Id),
                Description: ko.observable(model.Description)
            }
        }
          

        // 
        //addLevel:function() {this.MarketLevel += 1;} 
          
        var initialData = @Html.Raw(new JavaScriptSerializer().Serialize(Model));

        var reportViewModel = new Mha.Report(initialData);
        //set trending value
        //           reportViewModel.TrendSetter = ko.dependentObservable(function() {

        //           var TrendingValue = "0";
        //           if (reportViewModel.TrendOn = "On")
        //           {
        //            TrendingValue = reportViewModel.TrendOnPeriod()+reportViewModel.TrendOnSort();
        //           }
        //           reportViewModel.Trending(TrendingValue);
        //           
        //           }
        //           );

        //defaults when type changes
        function SetReportTypeDefaults() {

            reportViewModel.ShowDischargesHospital(true);
            reportViewModel.ShowDischargesState(true);
            reportViewModel.ShowDischargesPercent(true);
            reportViewModel.ShowLOSHospital(true);
            reportViewModel.ShowLOSState(true);
            reportViewModel.ShowLOSPercent(true);
            reportViewModel.ShowLOSHospitalPercent(true);
            reportViewModel.ShowHospitalPercent(true);
            reportViewModel.ShowField1(true);
            reportViewModel.ShowField1Description(true);
            reportViewModel.ShowField2(true);
            reportViewModel.ShowField2Description(true);
            reportViewModel.ShowField3(true);
            reportViewModel.ShowField3Description(true);

        };
        //set the report designer descriptions

        reportViewModel.SetDesignerDescriptions = ko.dependentObservable(function () {
            
            var hospspec = false;
            
            //check for fields using hospital

            if (reportViewModel.MarketLevel() > 0) {
                if (reportViewModel.Field1() == "da13301b-3299-465b-908a-95604b0f9e65") {
                    hospspec = true;
                }
                var index = FindInArray(reportViewModel.DictionaryList(),reportViewModel.Field1());
                if (reportViewModel.DictionaryList()[index].FieldType() == "H") {
                    hospspec = true;
                }
            }
            
            if (reportViewModel.MarketLevel() > 1) {
                if (reportViewModel.Field2() == "da13301b-3299-465b-908a-95604b0f9e65") {
                    hospspec = true;
                }
                var index = FindInArray(reportViewModel.DictionaryList(), reportViewModel.Field2());
                if (reportViewModel.DictionaryList()[index].FieldType() == "H") {
                    hospspec = true;
                }
            }
            if (reportViewModel.MarketLevel() > 2) {
                if (reportViewModel.Field3() == "da13301b-3299-465b-908a-95604b0f9e65") {
                    hospspec = true;
                }
                var index = FindInArray(reportViewModel.DictionaryList(), reportViewModel.Field3());
                if (reportViewModel.DictionaryList()[index].FieldType() == "H") {
                    hospspec = true;
                }
            }
            //override the hospital specific code for all trending and any > two level 
            if (reportViewModel.Trending() != '0' || reportViewModel.MarketLevel() > 2)
            {
                hospspec = false;
            }

            //look at the report type
           
            
            switch (reportViewModel.ReportTypesId()) {
                case 'MKTSHARE':
                    reportViewModel.Column1Text("Hospital Discharges");
                    reportViewModel.Column2Text("Total Discharges");
                    reportViewModel.Column3Text("Market Share of Discharges");
                    reportViewModel.Column4Text("Discharge Market Dependence");
                    reportViewModel.Column5Text("Hospital LOS");
                    reportViewModel.Column6Text("Total LOS");
                    reportViewModel.Column7Text("Market Share of LOS");
                    reportViewModel.Column8Text("LOS Market Dependence");
                    if (hospspec == true) {
                        reportViewModel.ReportDriver("HOSPMKTSHARE");
                       
                    }
                    else {
                        reportViewModel.ReportDriver("MKTSHARE");
                        
                    }
                    break;
                case 'MKTTREND':
                    reportViewModel.Column1Text("Hospital Discharges");
                    reportViewModel.Column2Text("Total Discharges");
                    reportViewModel.Column3Text("Market Share of Discharges");
                    reportViewModel.Column4Text("Discharge Market Dependence");
                    reportViewModel.Column5Text("Hospital LOS");
                    reportViewModel.Column6Text("Total LOS");
                    reportViewModel.Column7Text("Market Share of LOS");
                    reportViewModel.Column8Text("LOS Market Dependence");
                    if (hospspec == true) {
                        reportViewModel.ReportDriver("HOSPMKTSHARETREND");
                    }
                    else {
                        reportViewModel.ReportDriver("MKTSHARETREND");
                    }
                    break;
                case 'MKTREPLICATION':
                    reportViewModel.Column1Text("Replicated Total");
                    reportViewModel.Column2Text("Non-Replicated Total");
                    reportViewModel.Column3Text("");
                    reportViewModel.Column4Text("");
                    reportViewModel.Column5Text("");
                    reportViewModel.Column6Text("Total");
                    reportViewModel.Column7Text("Percent Replicated");
                    reportViewModel.Column8Text("");
                    reportViewModel.ReportDriver("MKTREPLICATION");
                    break;
                case 'MKTREPLICATIONTREND':
                    reportViewModel.Column1Text("Replicated Total");
                    reportViewModel.Column2Text("Non-Replicated Total");
                    reportViewModel.Column3Text("");
                    reportViewModel.Column4Text("");
                    reportViewModel.Column5Text("");
                    reportViewModel.Column6Text("Total");
                    reportViewModel.Column7Text("Percent Replicated");
                    reportViewModel.Column8Text("");
                    
                    reportViewModel.ReportDriver("MKTREPLICATIONTREND");
                    break;
                

                default:
                   
                    reportViewModel.ReportDriver("MKTSHARE");
                    reportViewModel.Column1Text("Hospital Discharges");
                    reportViewModel.Column2Text("Total Discharges");
                    reportViewModel.Column3Text("Market Share of Discharges");
                    reportViewModel.Column4Text("Discharge Market Dependence");
                    reportViewModel.Column5Text("Hospital LOS");
                    reportViewModel.Column6Text("Total LOS");
                    reportViewModel.Column7Text("Market Share of LOS");
                    reportViewModel.Column8Text("LOS Market Dependence");
                    if (hospspec == true) {
                        reportViewModel.ReportDriver("HOSPMKTSHARE");

                    }
                    else {
                        reportViewModel.ReportDriver("MKTSHARE");

                    }
                    
            }
            
            
        }, reportViewModel);

        

        //get trend descripition
        reportViewModel.TrendDescription = ko.dependentObservable(function() {
           
            var TrendDesc;
            var yearType = reportViewModel.YearType() == 'F' ? ' by Fiscal Year' : ' by Calendar Year';

            switch (reportViewModel.Trending())
            {
                case 'YASC': TrendDesc = 'Annual Trending from oldest to newest dates' +yearType+' (Sorted by Oldest Period)';
                    break;
                case 'YDESC': TrendDesc = 'Annual Trending from newest to oldest dates' +yearType+' (Sorted by Newest Period)';
                    break;
                case 'QASC': TrendDesc = 'Quarterly Trending from oldest to newest dates (Sorted by Oldest Period)';
                    break;
                case 'QDESC': TrendDesc = 'Quarterly Trending from newest to oldest dates (Sorted by Newest Period)';
                    break;
                case 'MASC': TrendDesc = 'Monthly Trending from oldest to newest dates (Sorted by Oldest Period)';
                    break;
                case 'MDESC': TrendDesc = 'Monthly Trending from newest to oldest dates (Sorted by Newest Period)';
                    break;
            
                default: TrendDesc = '';
            }
            return TrendDesc;
        });
        //try to see if I can trigger that the end date changed without the infinite loop
        reportViewModel.EndChanged = ko.dependentObservable(function() {
            if (reportViewModel.EndYearMonth() != reportViewModel.InitialEndYearMonth())
            {
                //trigger the change
                reportViewModel.InitialEndYearMonth(reportViewModel.EndYearMonth());
            }
        });
        //calculate start date from choices
        reportViewModel.TriggerDates = ko.dependentObservable(function () {
            var p = reportViewModel.DatePeriods();
            var endym = reportViewModel.DateList()[0].YearMonth().toString();
            var endmonth = parseInt(endym.substr(-2));
            if (endmonth == 12)
            {
                endmonth = 0;
            }
            //alert(endmonth);
            if (typeof p == "number") {
                p = p.toString();
            }
            var p2 = '';
            //p = p.replace(/[^\d]*/gi, "");
            var len = p.length;
            for (gg = 0; gg < len; gg++) {

                if (isNumeric(p.charAt(gg))) {
                    p2 += p.charAt(gg);

                }
            }
           // alert("this is p2 = " + p2 + " and this is DatePeriods " + reportViewModel.DatePeriods());
           // alert("this is reportViewModel.DateList().length " + reportViewModel.DateList().length);
            if (p2 == "") {
                p2 = 1;
            }
            //
            
            //do not allow values < 0
            if (DirtyDate == false)
            {
                reportViewModel.DateErrorMessage("");
            }
            //reportViewModel.DateErrorMessage("");
            if (p2 != reportViewModel.DatePeriods()) {
                // alert("This is where it's gettting 1 and p2 ! = DatePeriods; p2 = " + p2 + " and reportViewModel.DatePeriods() = " + reportViewModel.DatePeriods());
              //  reportViewModel.DateErrorMessage("Invalid Characters were entered. Changed to 1.");
                DirtyDate = true;
              //  reportViewModel.DatePeriods(1);

            }
            else {
                if (p2 < 1) {
                    reportViewModel.DateErrorMessage("Period must be greater than 0. Changed to 1.");
                    reportViewModel.DatePeriods(1);

                }
                //do not allow values that are bigger than the index
                if (reportViewModel.DatePeriodType() == "M" && p2 > reportViewModel.DateList().length) {
                  
                    reportViewModel.DateErrorMessage("Period calculation was changed to maximum monthly value.");
                    reportViewModel.DatePeriods(reportViewModel.DateList().length);

                }
                if (reportViewModel.DatePeriodType() == "Q" && p2 > (reportViewModel.DateList().length / 3)) {
                  
                    reportViewModel.DateErrorMessage("Period calculation was changed to maximum quarterly value.");
                    reportViewModel.DatePeriods(Math.floor(reportViewModel.DateList().length / 3));

                }
                if (reportViewModel.DatePeriodType() == "A" && p2 > (reportViewModel.DateList().length / 12)) {
                   // alert("This is for big year");
                    reportViewModel.DateErrorMessage("Period calculation was changed to maximum yearly value.");
                    reportViewModel.DatePeriods(Math.floor(reportViewModel.DateList().length / 12));

                }
                if (reportViewModel.DatePeriodType() == "Y" && p2 > (reportViewModel.DateList().length / 12)) {
                    // alert("This is for big year");
                    reportViewModel.DateErrorMessage("Period calculation was changed to maximum yearly value.");
                    reportViewModel.DatePeriods(Math.floor(reportViewModel.DateList().length / 12));

                }
            }
            if (reportViewModel.DateCalculationType() == 'C') {
                var newindex = 0;
                if (reportViewModel.DatePeriodType() == "A") {
                    newindex += (12 * parseInt(p2)) - 1;
                }
                if (reportViewModel.DatePeriodType() == "Y") {
                    newindex += (12 * parseInt(p2)) - 1 + (endmonth);
                }
                if (reportViewModel.DatePeriodType() == "Q") {
                    newindex += (3 * parseInt(p2)) - 1;
                }
                if (reportViewModel.DatePeriodType() == "M") {
                    newindex += parseInt(p2) - 1;
                }
                if (newindex + 1 >= reportViewModel.DateList().length) {
                    newindex = reportViewModel.DateList().length - 1;
                }

                reportViewModel.StartYearMonth(reportViewModel.DateList()[newindex].YearMonth());
                reportViewModel.EndYearMonth(reportViewModel.DateList()[0].YearMonth());
            }
            
        }, reportViewModel);

        //entered date checker
        reportViewModel.InvalidDates = ko.dependentObservable(function () {
            var p = reportViewModel.StartYearMonth();
            var q = reportViewModel.EndYearMonth();
            if (p > q) {
                reportViewModel.InvalidDate("Start Date is greater than End Date");

            }
            else {
                reportViewModel.InvalidDate("");
            }
            
        }, reportViewModel);
        ///count and report unbalanced paranthesis
        reportViewModel.ParenthesisMessage = ko.dependentObservable( function() {
            var returnmessage = '';
            if (reportViewModel.ShowAdvancedFilter() == true)
            {
                var totalopened = 0;
                var totalclosed = 0;
            
                var closederror = '';
                var invalidmessage = "";
                var shouldforce = false;
                for (var i = 0; i < reportViewModel.MarketShareLiveFilterDetailsList().length; i++)
                {
                    var newandor = reportViewModel.MarketShareLiveFilterDetailsList()[i].AndOr();
                    if (newandor == 'OR')
                    {
                        shouldforce = true;
                    }
                    var newopened = reportViewModel.MarketShareLiveFilterDetailsList()[i].OpenParenthesis().match(/\(/gi);
                
                    if (newopened != null)
                    {   
                        if (newopened.length > 1)
                        {
                            shouldforce = true;
                        }
                        totalopened += newopened.length;  
                    } 
                    var newclosed = reportViewModel.MarketShareLiveFilterDetailsList()[i].CloseParenthesis().match(/\)/gi);
                    if (newclosed != null)
                    {   
                        if (newclosed.length > 1)
                        {
                            shouldforce = true;
                        }
                        totalclosed += newclosed.length;
                        if (totalclosed > totalopened)
                        {
                            closederror = "     ***  Parenthesis are not formatted correctly  ***";
                        }
                    }
                }
                if (totalopened != totalclosed)
                {
                     returnmessage = "     *** Parenthesis are NOT balanced. Open: " + totalopened +"  Closed: "+totalclosed+ " ***";
                }
                else if (closederror != '')
                {
                    returnmessage = closederror;
                }
                
               
            }
            else {

                for (var i = 0; i < reportViewModel.MarketShareLiveFilterDetailsList().length; i++)
                {
                    var newandor = reportViewModel.MarketShareLiveFilterDetailsList()[i].AndOr();
                    if (newandor == 'Or')
                    {
                        returnmessage = 'Filter was reformatted';
                    }
                    var newopened = reportViewModel.MarketShareLiveFilterDetailsList()[i].OpenParenthesis().match(/\(/gi);
                    if (newopened != null)
                    {  
                        if (newopened.length > 1)
                        {
                            returnmessage = 'Filter was reformatted';
                        }
                        
                    }
                    var newclosed = reportViewModel.MarketShareLiveFilterDetailsList()[i].CloseParenthesis().match(/\)/gi);
                    if (newclosed != null)
                    {   
                        if (newclosed.length > 1)
                        {
                            returnmessage = 'Filter was reformatted';
                        }
                        
                    }
                    reportViewModel.MarketShareLiveFilterDetailsList()[i].AndOr('AND');
                    reportViewModel.MarketShareLiveFilterDetailsList()[i].OpenParenthesis('(');
                    reportViewModel.MarketShareLiveFilterDetailsList()[i].CloseParenthesis(')');
                    
                }
                
            }
            return returnmessage ;
        },reportViewModel);

        reportViewModel.ParenthesisMessageGeographic = ko.dependentObservable( function() {
            var returnmessage = '';
            if (reportViewModel.ShowAdvancedFilter() == true)
            {
                var totalopened = 0;
                var totalclosed = 0;
            
                var closederror = '';
                var invalidmessage = "";
                var shouldforce = false;
                for (var i = 0; i < reportViewModel.MarketShareLiveFilterGeographicDetailsList().length; i++)
                {
                    var newandor = reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].AndOr();
                    if (newandor == 'Or')
                    {
                        shouldforce = true;
                    }
                    var newopened = reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].OpenParenthesis().match(/\(/gi);
                    if (newopened != null)
                    {  
                        if (newopened.length > 1)
                        {
                            shouldforce = true;
                        }
                        totalopened += newopened.length;  
                    } 
                    var newclosed = reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].CloseParenthesis().match(/\)/gi);
                    if (newclosed != null)
                    {   
                        if (newclosed.length > 1)
                        {
                            shouldforce = true;
                        }        
                        totalclosed += newclosed.length;  
                        if (totalclosed > totalopened)
                        {
                            closederror = "     ***  Parenthesis are not formatted correctly  ***";
                        }
                    }
                }
                if (totalopened != totalclosed)
                {
                    returnmessage = "     *** Parenthesis are NOT balanced. Open: " + totalopened +"  Closed: "+totalclosed+ " ***";
                }
                else if (closederror != '')
                {
                    returnmessage = closederror;
                }
                
            }
            else {

                for (var i = 0; i < reportViewModel.MarketShareLiveFilterGeographicDetailsList().length; i++)
                {
                    var newandor = reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].AndOr();
                    if (newandor == 'Or')
                    {
                        returnmessage = 'Filter was reformatted';
                    }
                    var newopened = reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].OpenParenthesis().match(/\(/gi);
                    if (newopened != null)
                    {  
                        if (newopened.length > 1)
                        {
                            returnmessage = 'Filter was reformatted';
                        }
                        
                    }
                    var newclosed = reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].CloseParenthesis().match(/\)/gi);
                    if (newclosed != null)
                    {   
                        if (newclosed.length > 1)
                        {
                            returnmessage = 'Filter was reformatted';
                        }
                        
                    }
                    reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].AndOr('AND');
                    reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].OpenParenthesis('(');
                    reportViewModel.MarketShareLiveFilterGeographicDetailsList()[i].CloseParenthesis(')');
                    
                }
                
            }
            return returnmessage ;
        }, reportViewModel);

        //validate current report state
        reportViewModel.ValidateReportMessage = ko.dependentObservable(function () {
               
               
            var invalidmessage = "";
            //check for fields

            if (reportViewModel.MarketLevel() > 0) {
                if (!reportViewModel.Field1()) {
                    invalidmessage = invalidmessage + "Error:Field 1 is invalid   ";
                }
            }
            if (reportViewModel.MarketLevel() > 1) {
                if (!reportViewModel.Field2()) {
                    invalidmessage = invalidmessage + "Error:Field 2 is invalid   ";
                }
            }
            if (reportViewModel.MarketLevel() > 2) {
                if (!reportViewModel.Field3()) {
                    invalidmessage = invalidmessage + "Error:Field 3 is invalid   ";
                }
            }
            if (reportViewModel.EndYearMonth() < reportViewModel.StartYearMonth()) {
                
                    invalidmessage = invalidmessage + "Error:Start Date is greater than End Date   ";
                
            }
            //for (var i = 0; i < reportViewModel.MarketShareLiveFilterDetailsList().length; i++) {
            //    var newopened = reportViewModel.MarketShareLiveFilterDetailsList()[i].FieldName();;
            //    if (newopened != null) {
            //        totalopened += newopened.length;
            //    }
            //    var newclosed = reportViewModel.MarketShareLiveFilterDetailsList()[i].CloseParenthesis().match(/\)/gi);
            //    if (newclosed != null) {
            //        totalclosed += newclosed.length;
            //    }
            //}
            //if (totalopened != totalclosed) {
            //    var returnmessage = "     *** Parenthesis are NOT balanced. Open: " + totalopened + "  Closed: " + totalclosed + " ***";
            //}

            return invalidmessage;
        }, reportViewModel);

           



        ///build the full SQL
        function BuildSQL() {
            reportViewModel.SQLStatement("");
            var SQL = "";
            var tagstart = "<div>";
            var tagend = "</div>";
            var currentline = ""

            for (var i = 0; i < reportViewModel.MarketShareLiveFilterDetailsList().length; i++)
            {
                if (reportViewModel.MarketShareLiveFilterDetailsList()[i].SQLText() != null)
                { 
                    if (i == 0)
                    {
                        currentline = reportViewModel.MarketShareLiveFilterDetailsList()[i].OpenParenthesis()+" "+reportViewModel.MarketShareLiveFilterDetailsList()[i].SQLText()+reportViewModel.MarketShareLiveFilterDetailsList()[i].CloseParenthesis();
                    }
                    else
                    {
                        currentline = reportViewModel.MarketShareLiveFilterDetailsList()[i].AndOr()+" "+reportViewModel.MarketShareLiveFilterDetailsList()[i].OpenParenthesis()+" "+reportViewModel.MarketShareLiveFilterDetailsList()[i].SQLText()+reportViewModel.MarketShareLiveFilterDetailsList()[i].CloseParenthesis();
                    }
                    SQL += tagstart+currentline+tagend; 
                    //sqlMessage += " "+ currentline;
                }
            }
            reportViewModel.SQLStatement(SQL);
        };

         
         

        ko.applyBindings(reportViewModel); 
           
        //reportViewModel.DataType1.subscribe(function(){
        //    reportViewModel.ActionMethod("Update");
           
        //    $("form#TheForm").submit();

        //});
        //reportViewModel.UnitId.subscribe(function(){
        //    reportViewModel.ActionMethod("Update");
            
        //    $("form#TheForm").submit();

        //});
        reportViewModel.InitialEndYearMonth.subscribe(function(){
           
            
                reportViewModel.ActionMethod("UpdateDate");
            
                $("form#TheForm").submit();
            

        });
        
        // attach the jquery unobtrusive validator	
        $.validator.unobtrusive.parse("form");	
        // bind the submit handler to unobtrusive validation.	
        $("form").data("validator").settings.submitHandler = function() {reportViewModel.Save( $("form"));};
        function setmessage(e) {
            reportViewModel.RequestMessage(e);
        };
        function setsuccessmessage() {
            reportViewModel.RequestMessage("Your Report Completed.  Status: COMPLETED");
        };
        function WizardSelect(e) {
            var selectedTab = $(e.item);   
            reportViewModel.WizardTab(selectedTab.index());    
        };

        function SetWizard() {
            var tabIndex = reportViewModel.WizardTab();
              
            var tabstrip = $("#TabStrip").data("tTabStrip");
            var item = $("li", tabstrip.element)[tabIndex];        
            tabstrip.select(item);
              
              
        };

        function WizardNext() {
            onTabClick();
            var tabIndex = parseInt(reportViewModel.WizardTab());
              
            if (tabIndex <= 5)
            {
                tabIndex = tabIndex + 1;
            }
            
            reportViewModel.WizardTab(tabIndex);
            var tabstrip = $("#TabStrip").data("tTabStrip");
            var item = $("li", tabstrip.element)[tabIndex];        
            tabstrip.select(item);
              
              
        }; 
        function WizardPrevious() {
            onTabClick();
            var tabIndex = reportViewModel.WizardTab();
            if (tabIndex >= 1)
            {
                tabIndex = tabIndex - 1;
            }
             
            reportViewModel.WizardTab(tabIndex);
            var tabstrip = $("#TabStrip").data("tTabStrip");
            var item = $("li", tabstrip.element)[tabIndex];        
            tabstrip.select(item);
        };
        function setColumnSorts(tableName,index,ascDesc) {

            forEach(document.getElementsByTagName('table'), function (table) {

                if (table.className.search(/\bsortable\b/) != -1 && table.id == tableName) {
                    headrow = table.tHead.rows[0].cells;
                    if (ascDesc == 'ASC') {
                        headrow[index].className += ' sorttable_ascending';
                        sortfwdind = document.createElement('span');
                        sortfwdind.id = tableName + "sorttable_ascendingind";
                        sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
                        headrow[index].appendChild(sortfwdind);
                    }
                    else {
                        headrow[index].className += ' sorttable_descending';
                        sortfwdind = document.createElement('span');
                        sortfwdind.id = tableName + "sorttable_descendingind";
                        sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
                        headrow[index].appendChild(sortfwdind);
                    }
                }
            });
        };
        function getURLParam(strParamName){
            var strReturn = "";
            var strHref = window.location.href;
            if ( strHref.indexOf("?") > -1 ){
                var strQueryString = strHref.substr(strHref.indexOf("?")).toLowerCase();
                var aQueryString = strQueryString.split("&");
                for ( var iParam = 0; iParam < aQueryString.length; iParam++ ){
                    if ( 
              aQueryString[iParam].indexOf(strParamName.toLowerCase() + "=") > -1 ){
                        var aParam = aQueryString[iParam].split("=");
                        strReturn = aParam[1];
                        break;
                    }
                }
            }
            return unescape(strReturn);
        };
        //used only during initial loading of data
        function SetTrendSorts(){
            
            var trendreport = reportViewModel.ReportTypesId();
            
            if (trendreport != "MKTTREND" && trendreport != "MKTREPLICATIONTREND") {
                reportViewModel.Trending("0");
            }
            var trendvalue = reportViewModel.Trending();
            switch (trendvalue)
            {
                case '0': 
                    reportViewModel.TrendOn("Off");
                    reportViewModel.TrendOnPeriod("M");
                    reportViewModel.TrendOnSort("DESC");
                    break;
                case 'YASC': 
                    reportViewModel.TrendOn("On");
                    reportViewModel.TrendOnPeriod("Y");
                    reportViewModel.TrendOnSort("ASC");
                    break;
                case 'YDESC': 
                    reportViewModel.TrendOn("On");
                    reportViewModel.TrendOnPeriod("Y");
                    reportViewModel.TrendOnSort("DESC");
                    break;
                case 'QASC': 
                    reportViewModel.TrendOn("On");
                    reportViewModel.TrendOnPeriod("Q");
                    reportViewModel.TrendOnSort("ASC");
                    break;
                case 'QDESC': 
                    reportViewModel.TrendOn("On");
                    reportViewModel.TrendOnPeriod("Q");
                    reportViewModel.TrendOnSort("DESC");
                    break;
                case 'MASC': 
                    reportViewModel.TrendOn("On");
                    reportViewModel.TrendOnPeriod("M");
                    reportViewModel.TrendOnSort("ASC");
                    break;
                case 'MDESC': 
                    reportViewModel.TrendOn("On");
                    reportViewModel.TrendOnPeriod("M");
                    reportViewModel.TrendOnSort("DESC");
                    break;
                default: 
                    reportViewModel.TrendOn("Off");
                    reportViewModel.TrendOnPeriod("M");
                    reportViewModel.TrendOnSort("DESC");
            }

        };
        function reloadGrid() {
            var grid2 = $("#GridViewResults").data("tGrid");
            grid2.rebind();
            //Timer = setTimeout("reloadGrid()", 10000);
            //TimerisOn = true;
            //TimerCounter = TimerCounter + 1;
            //if (TimerCounter > 20) {
            //    stopTimer();
            //}
        };
        //function stopTimer() {
        //    clearTimeout(Timer);
            
        //    TimerisOn = false;
       
       // }
        
        //set the trending value based on the combos
        function SetTrendingValue(){
            //start
            var trendreport = reportViewModel.ReportTypesId();
            if (trendreport != "MKTTREND" && trendreport != "MKTREPLICATIONTREND") {
               // reportViewModel.Trending("0");
                reportViewModel.TrendOn("Off");
            }
            else {
                //reportViewModel.Trending("0");
                reportViewModel.TrendOn("On");
            }
            var TrendingValue = "0";
            if (reportViewModel.TrendOn() == "On")
            {
                TrendingValue = reportViewModel.TrendOnPeriod()+reportViewModel.TrendOnSort();
            }
            reportViewModel.Trending(TrendingValue);
            //stop 
        };
        //used only during initial loading of data
        function SetFieldSorts(){
            var fieldsort;
            var fieldAscDesc;
            var columnIndex;
             
            fieldsort = reportViewModel.Field1SortBy();
            fieldAscDesc = reportViewModel.Field1AscDesc();
            columnIndex = GetSortIndex(fieldsort);
            setColumnSorts("Field1",columnIndex,fieldAscDesc);

            fieldsort = reportViewModel.Field2SortBy();
            fieldAscDesc = reportViewModel.Field2AscDesc();
            columnIndex = GetSortIndex(fieldsort);
            setColumnSorts("Field2",columnIndex,fieldAscDesc);

            fieldsort = reportViewModel.Field3SortBy();
            fieldAscDesc = reportViewModel.Field3AscDesc();
            columnIndex = GetSortIndex(fieldsort);
            setColumnSorts("Field3",columnIndex,fieldAscDesc);

        };
        function GetSortIndex(Field){
            var newindex = 1;
            switch (Field)
            {
                case 'FIELD1DESCRIPTION': newindex = 2;
                    break;
                case 'FIELD2DESCRIPTION': newindex = 2;
                    break;
                case 'FIELD3DESCRIPTION': newindex = 2;
                    break;
                case 'FIELD1': newindex = 1;
                    break;
                case 'FIELD2': newindex = 1;
                    break;
                case 'FIELD3': newindex = 1;
                    break;
  
                case 'FACILDISCH': newindex = 3;
                    break;
                case 'STATEDISCH': newindex = 4;
                    break;
                case 'DISCHMKTSHARE': newindex = 5;
                    break;
                case 'DISCHHOSPSHARE': newindex = 6;
                    break;
                case 'FACILLOS': newindex = 7;
                    break;
                case 'STATELOS': newindex = 8;
                    break;
                case 'LOSMKTSHARE': newindex = 9;
                    break;
                case 'LOSHOSPSHARE': newindex = 10;
                    break;
                default: newindex = 3;
            }
            return newindex;
        };
  
        function msieversion()
        {
            var ua = window.navigator.userAgent
            var msie = ua.indexOf ( "MSIE " )

            if ( msie > 0 )      // If Internet Explorer, return version number
                return parseInt (ua.substring (msie+5, ua.indexOf (".", msie )))
            else                 // If another browser, return 0
                return 0

        }
 
        // alert( msieversion());              
        window.onload=function(){SetTrendSorts();SetFieldSorts();SetWizard()}; // this work in IE 8

        // window.onload=SetFieldSorts(); // this works in IE 9
    
    </script>
   
<script type="text/javascript">
    function OnLoad() {
        $(this).find(".t-filter").click(function () {
            setTimeout(function () {
                $(".t-filter-operator").each(function () {
                    $(this).val("substringof");
                });
            });
        });
    }

    function viewHipaa() {
              
        $("#contentholder2").html("To comply with HIPAA regulations, the results have been suppressed because there is a reasonable basis to believe that the information could be used to identify an individual.  Please contact support at  <a href='mailto: datakoala@mha.org'> datakoala@mha.org</a> if you need further assistance.")
        //$('div.contentholder').html(summarycontent);
        $('#ViewHIPAADialog').dialog('open');

    }

    $(function () {

        

        $('#ViewHIPAADialog').dialog({
            autoOpen: false,
            width: 650,
            resizable: false,
            title: 'HIPAA Warning',
            position: 'center top',
            modal: true,


            buttons: {
                "Close": function () {
                    $(this).dialog("close");
                }
            }
        });
    });  // end of Jquery functions  
</script>

   
    
    
    



